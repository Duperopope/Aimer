#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AIMER PRO - Application Principale PyQt6
¬© 2025 KairosForge - Tous droits r√©serv√©s

Application commerciale Single Window avec architecture MVC
"""

import sys
import os
from pathlib import Path
from typing import Optional
import logging

from PyQt6.QtWidgets import QApplication, QMainWindow, QSplashScreen
from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QThread
from PyQt6.QtGui import QPixmap, QIcon, QFont

# Imports locaux
from .license_manager import LicenseManager
from .settings_manager import SettingsManager
from ..ui.main_window import MainWindow
from ..ui.theme_manager import ThemeManager

class KairosForgeApplication(QApplication):
    """
    Application principale AIMER PRO
    G√®re l'initialisation, la licence, et le cycle de vie
    """
    
    # Signaux
    license_validated = pyqtSignal(bool)
    initialization_complete = pyqtSignal()
    
    def __init__(self, argv):
        super().__init__(argv)
        
        # Configuration application
        self.setApplicationName("AIMER PRO")
        self.setApplicationVersion("1.0.0")
        self.setOrganizationName("KairosForge")
        self.setOrganizationDomain("kairosforge.com")
        
        # Variables d'instance
        self.main_window: Optional[MainWindow] = None
        self.splash_screen: Optional[QSplashScreen] = None
        self.license_manager: Optional[LicenseManager] = None
        self.settings_manager: Optional[SettingsManager] = None
        self.theme_manager: Optional[ThemeManager] = None
        
        # Configuration logging
        self.setup_logging()
        
        # Configuration interface
        self.setup_ui_properties()
        
        # D√©marrage
        self.initialize_application()
    
    def setup_logging(self):
        """Configure le syst√®me de logging"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "aimer_pro.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        self.logger = logging.getLogger("KairosForgeApp")
        self.logger.info("D√©marrage AIMER PRO")
    
    def setup_ui_properties(self):
        """Configure les propri√©t√©s UI globales"""
        # Police syst√®me
        font = QFont("Inter", 10)
        font.setStyleHint(QFont.StyleHint.SansSerif)
        self.setFont(font)
        
        # Style global
        self.setStyle("Fusion")
        
        # Configuration haute r√©solution (PyQt6 compatible)
        try:
            self.setAttribute(Qt.ApplicationAttribute.AA_EnableHighDpiScaling, True)
        except AttributeError:
            # PyQt6 g√®re automatiquement le high DPI
            pass
        
        try:
            self.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps, True)
        except AttributeError:
            # PyQt6 g√®re automatiquement les pixmaps high DPI
            pass
    
    def initialize_application(self):
        """Initialise l'application √©tape par √©tape"""
        self.logger.info("Initialisation de l'application...")
        
        # Initialisation directe (sans splash screen pour debug)
        self.initialize_components()
    
    def show_splash_screen(self):
        """Affiche l'√©cran de d√©marrage"""
        try:
            # Cr√©er un pixmap pour le splash (temporaire - sera remplac√© par logo)
            pixmap = QPixmap(600, 400)
            pixmap.fill(Qt.GlobalColor.black)
            
            self.splash_screen = QSplashScreen(pixmap)
            self.splash_screen.setWindowFlags(
                Qt.WindowType.WindowStaysOnTopHint | 
                Qt.WindowType.FramelessWindowHint
            )
            
            # Message de d√©marrage
            self.splash_screen.showMessage(
                "üéØ AIMER PRO - KairosForge\nInitialisation...",
                Qt.AlignmentFlag.AlignCenter | Qt.AlignmentFlag.AlignBottom,
                Qt.GlobalColor.white
            )
            
            self.splash_screen.show()
            self.processEvents()
            
        except Exception as e:
            self.logger.error(f"Erreur splash screen: {e}")
    
    def initialize_components(self):
        """Initialise les composants principaux"""
        try:
            # 1. Gestionnaire de param√®tres
            self.logger.info("Chargement des param√®tres...")
            self.settings_manager = SettingsManager()
            
            # 2. Gestionnaire de th√®mes
            self.logger.info("Configuration des th√®mes...")
            self.theme_manager = ThemeManager(self)
            
            # 3. Gestionnaire de licence
            self.logger.info("Validation de la licence...")
            self.license_manager = LicenseManager()
            
            # 4. Validation licence
            if not self.validate_license():
                self.logger.error("Licence invalide")
                self.quit()
                return
            
            # 5. Fen√™tre principale
            self.logger.info("Chargement de l'interface...")
            self.create_main_window()
            
            # 6. Finalisation
            self.finalize_initialization()
            
        except Exception as e:
            self.logger.error(f"Erreur initialisation: {e}")
            self.quit()
    
    def update_splash_message(self, message: str):
        """Met √† jour le message du splash screen"""
        if self.splash_screen and not self.splash_screen.isHidden():
            try:
                self.splash_screen.showMessage(
                    f"üéØ AIMER PRO - KairosForge\n{message}",
                    Qt.AlignmentFlag.AlignCenter | Qt.AlignmentFlag.AlignBottom,
                    Qt.GlobalColor.white
                )
                self.processEvents()
            except Exception as e:
                self.logger.debug(f"Erreur mise √† jour splash: {e}")
    
    def validate_license(self) -> bool:
        """Valide la licence utilisateur"""
        try:
            if not self.license_manager:
                return False
            
            # Validation licence (impl√©mentation basique pour l'instant)
            is_valid = self.license_manager.validate_license()
            
            if is_valid:
                self.logger.info("‚úÖ Licence valid√©e")
                self.license_validated.emit(True)
            else:
                self.logger.warning("‚ùå Licence invalide")
                self.license_validated.emit(False)
            
            return is_valid
            
        except Exception as e:
            self.logger.error(f"Erreur validation licence: {e}")
            return False
    
    def create_main_window(self):
        """Cr√©e la fen√™tre principale"""
        try:
            self.logger.info("Cr√©ation MainWindow...")
            self.main_window = MainWindow(
                settings_manager=self.settings_manager,
                theme_manager=self.theme_manager,
                license_manager=self.license_manager
            )
            
            self.logger.info("Configuration fen√™tre...")
            # Configuration fen√™tre
            self.main_window.setWindowTitle("AIMER PRO - KairosForge")
            self.main_window.setMinimumSize(1280, 720)
            
            # Ic√¥ne application (temporaire)
            # self.main_window.setWindowIcon(QIcon("assets/icon.ico"))
            
            self.logger.info("Fen√™tre principale cr√©√©e avec succ√®s")
            
        except Exception as e:
            import traceback
            self.logger.error(f"Erreur cr√©ation fen√™tre: {e}")
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            raise
    
    def finalize_initialization(self):
        """Finalise l'initialisation"""
        try:
            # Fermer splash screen AVANT d'afficher la fen√™tre principale
            if self.splash_screen:
                self.splash_screen.close()
                self.splash_screen = None
            
            # Petit d√©lai pour s'assurer que le splash est ferm√©
            self.processEvents()
            
            # Afficher fen√™tre principale
            if self.main_window:
                self.main_window.show()
                self.main_window.raise_()
                self.main_window.activateWindow()
            
            # Signal d'initialisation compl√®te
            self.initialization_complete.emit()
            
            self.logger.info("‚úÖ Initialisation termin√©e")
            
        except Exception as e:
            self.logger.error(f"Erreur finalisation: {e}")
    
    def get_main_window(self) -> Optional[MainWindow]:
        """Retourne la fen√™tre principale"""
        return self.main_window
    
    def get_settings_manager(self) -> Optional[SettingsManager]:
        """Retourne le gestionnaire de param√®tres"""
        return self.settings_manager
    
    def get_theme_manager(self) -> Optional[ThemeManager]:
        """Retourne le gestionnaire de th√®mes"""
        return self.theme_manager
    
    def get_license_manager(self) -> Optional[LicenseManager]:
        """Retourne le gestionnaire de licence"""
        return self.license_manager
    
    def closeEvent(self, event):
        """G√®re la fermeture de l'application"""
        self.logger.info("Fermeture de l'application")
        
        # Sauvegarder les param√®tres
        if self.settings_manager:
            self.settings_manager.save_settings()
        
        # Nettoyage
        if self.main_window:
            self.main_window.close()
        
        event.accept()

def create_application(argv) -> KairosForgeApplication:
    """Factory pour cr√©er l'application"""
    return KairosForgeApplication(argv)

def main():
    """Point d'entr√©e principal"""
    try:
        # Cr√©er application
        app = create_application(sys.argv)
        
        # Lancer boucle √©v√©nements
        exit_code = app.exec()
        
        # Nettoyage final
        sys.exit(exit_code)
        
    except Exception as e:
        print(f"Erreur fatale: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
