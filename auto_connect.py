#!/usr/bin/env python3
"""
üöÄ AIMER Auto-Connect
Connexion automatique au syst√®me de monitoring d'erreurs
Lance tous les syst√®mes de surveillance sans intervention
"""

import os
import subprocess
import sys
import threading
import time
from pathlib import Path


class AimerAutoConnect:
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.processes = {}
        self.running = True

    def log(self, message):
        """Log avec timestamp"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")

    def check_requirements(self):
        """V√©rifie que tous les requirements sont install√©s"""
        self.log("üîç V√©rification des requirements...")

        try:
            # Installer automatiquement les packages manquants
            required_packages = [
                "rich",
                "cryptography",
                "psutil",
                "pyperclip",
                "click",
                "python-dotenv",
                "pydantic",
            ]

            for package in required_packages:
                try:
                    __import__(package.replace("-", "_"))
                    self.log(f"‚úÖ {package} OK")
                except ImportError:
                    self.log(f"üì¶ Installation de {package}...")
                    subprocess.run(
                        [sys.executable, "-m", "pip", "install", package],
                        check=True,
                        capture_output=True,
                    )
                    self.log(f"‚úÖ {package} install√©")

            return True

        except Exception as e:
            self.log(f"‚ùå Erreur requirements: {e}")
            return False

    def start_error_monitor(self):
        """Lance le monitoring d'erreurs en arri√®re-plan"""
        self.log("üîç D√©marrage du monitoring d'erreurs...")

        try:
            # V√©rifier si d√©j√† actif
            pid_file = self.base_path / ".error_monitor.pid"
            if pid_file.exists():
                self.log("‚ö†Ô∏è Monitoring d√©j√† actif")
                return True

            # Lancer le monitoring en arri√®re-plan
            process = subprocess.Popen(
                [sys.executable, "error_monitor.py"],
                cwd=self.base_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == "nt" else 0,
            )

            self.processes["error_monitor"] = process
            self.log("‚úÖ Monitoring d'erreurs d√©marr√©")

            # Attendre un peu pour v√©rifier que √ßa fonctionne
            time.sleep(3)
            if process.poll() is None:
                self.log("üü¢ Monitoring actif et fonctionnel")
                return True
            else:
                self.log("‚ùå √âchec d√©marrage monitoring")
                return False

        except Exception as e:
            self.log(f"‚ùå Erreur monitoring: {e}")
            return False

    def run_initial_health_check(self):
        """Lance une v√©rification de sant√© initiale"""
        self.log("üè• V√©rification de sant√© initiale...")

        try:
            result = subprocess.run(
                [sys.executable, "final_checker.py"],
                cwd=self.base_path,
                capture_output=True,
                text=True,
                timeout=60,
            )

            if result.returncode == 0:
                self.log("‚úÖ V√©rification de sant√© r√©ussie")
                # Extraire le score du r√©sultat
                output_lines = result.stdout.split("\n")
                for line in output_lines:
                    if "Score:" in line:
                        self.log(f"üìä {line.strip()}")
                        break
                return True
            else:
                self.log("‚ö†Ô∏è V√©rification de sant√© avec avertissements")
                return False

        except Exception as e:
            self.log(f"‚ùå Erreur v√©rification: {e}")
            return False

    def auto_fix_critical_errors(self):
        """Lance une correction automatique des erreurs critiques"""
        self.log("üîß Correction automatique des erreurs critiques...")

        try:
            result = subprocess.run(
                [sys.executable, "auto_fix_advanced.py"],
                cwd=self.base_path,
                capture_output=True,
                text=True,
                timeout=120,
            )

            if result.returncode == 0:
                self.log("‚úÖ Correction automatique termin√©e")
                return True
            else:
                self.log("‚ö†Ô∏è Correction avec avertissements")
                return False

        except Exception as e:
            self.log(f"‚ùå Erreur correction: {e}")
            return False

    def start_dashboard_option(self):
        """Propose de lancer le dashboard"""
        self.log("üìä Dashboard d'erreurs disponible")
        self.log("üí° Pour voir le dashboard: python error_dashboard.py")
        self.log("üí° Ou utilisez: start_error_monitor.bat")

    def monitor_system_health(self):
        """Surveille la sant√© du syst√®me en arri√®re-plan"""
        while self.running:
            try:
                time.sleep(60)  # V√©rification toutes les minutes

                # V√©rifier que le monitoring tourne toujours
                pid_file = self.base_path / ".error_monitor.pid"
                if not pid_file.exists() and "error_monitor" in self.processes:
                    self.log("‚ö†Ô∏è Monitoring arr√™t√©, red√©marrage...")
                    self.start_error_monitor()

            except Exception as e:
                self.log(f"‚ùå Erreur surveillance: {e}")

    def setup_vscode_integration(self):
        """Configure l'int√©gration VS Code pour le monitoring"""
        self.log("üîß Configuration de l'int√©gration VS Code...")

        try:
            vscode_dir = self.base_path / ".vscode"
            vscode_dir.mkdir(exist_ok=True)

            # Ajouter des t√¢ches pour le monitoring
            tasks_file = vscode_dir / "tasks.json"

            if tasks_file.exists():
                import json

                with open(tasks_file, "r", encoding="utf-8") as f:
                    tasks = json.load(f)
            else:
                tasks = {"version": "2.0.0", "tasks": []}

            # Ajouter les t√¢ches de monitoring
            monitoring_tasks = [
                {
                    "label": "AIMER: Start Error Monitor",
                    "type": "shell",
                    "command": "python",
                    "args": ["error_monitor.py"],
                    "group": "build",
                    "isBackground": True,
                    "presentation": {
                        "echo": True,
                        "reveal": "always",
                        "focus": False,
                        "panel": "new",
                    },
                },
                {
                    "label": "AIMER: Error Dashboard",
                    "type": "shell",
                    "command": "python",
                    "args": ["error_dashboard.py"],
                    "group": "build",
                    "presentation": {
                        "echo": True,
                        "reveal": "always",
                        "focus": True,
                        "panel": "new",
                    },
                },
                {
                    "label": "AIMER: Auto-Connect",
                    "type": "shell",
                    "command": "python",
                    "args": ["auto_connect.py"],
                    "group": "build",
                },
            ]

            # Ajouter sans dupliquer
            existing_labels = [task.get("label", "") for task in tasks.get("tasks", [])]
            for task in monitoring_tasks:
                if task["label"] not in existing_labels:
                    tasks["tasks"].append(task)

            with open(tasks_file, "w", encoding="utf-8") as f:
                json.dump(tasks, f, indent=2, ensure_ascii=False)

            self.log("‚úÖ T√¢ches VS Code configur√©es")
            return True

        except Exception as e:
            self.log(f"‚ùå Erreur config VS Code: {e}")
            return False

    def connect_and_monitor(self):
        """Lance la connexion compl√®te et le monitoring"""
        self.log("üöÄ AIMER Auto-Connect - D√©marrage")
        self.log("=" * 50)

        # √âtape 1: V√©rifier les requirements
        if not self.check_requirements():
            self.log("üí• √âchec v√©rification requirements")
            return False

        # √âtape 2: Correction pr√©ventive
        self.auto_fix_critical_errors()

        # √âtape 3: V√©rification de sant√©
        self.run_initial_health_check()

        # √âtape 4: Configuration VS Code
        self.setup_vscode_integration()

        # √âtape 5: D√©marrage du monitoring
        if not self.start_error_monitor():
            self.log("üí• √âchec d√©marrage monitoring")
            return False

        # √âtape 6: Informations pour l'utilisateur
        self.start_dashboard_option()

        self.log("=" * 50)
        self.log("üéâ AIMER Auto-Connect termin√© avec succ√®s!")
        self.log("üîç Monitoring d'erreurs actif en arri√®re-plan")
        self.log("üìä Dashboard disponible via: python error_dashboard.py")
        self.log("üîß T√¢ches VS Code configur√©es")
        self.log("üí° Le syst√®me surveille maintenant automatiquement:")
        self.log("   ‚Ä¢ Erreurs de syntaxe Python")
        self.log("   ‚Ä¢ Imports manquants")
        self.log("   ‚Ä¢ Erreurs YAML")
        self.log("   ‚Ä¢ Auto-correction des erreurs critiques")
        self.log("")
        self.log("üõë Le monitoring continuera en arri√®re-plan")
        self.log("üì± Utilisez le dashboard pour voir les erreurs en temps r√©el")

        # D√©marrer la surveillance de sant√©
        health_thread = threading.Thread(target=self.monitor_system_health, daemon=True)
        health_thread.start()

        return True

    def cleanup(self):
        """Nettoie les processus lors de l'arr√™t"""
        self.running = False
        for name, process in self.processes.items():
            try:
                process.terminate()
                self.log(f"üõë Arr√™t de {name}")
            except Exception:
                pass


def main():
    """Point d'entr√©e principal"""
    connector = AimerAutoConnect()

    try:
        success = connector.connect_and_monitor()

        if success:
            print("\n" + "=" * 50)
            print("‚ú® CONNEXION AUTOMATIQUE R√âUSSIE!")
            print("üîç Monitoring actif - Erreurs surveill√©es en temps r√©el")
            print("üìä Dashboard: python error_dashboard.py")
            print("üõë Ctrl+C pour quitter ce script (monitoring continue)")
            print("=" * 50)

            # Garder le script actif pour la surveillance
            try:
                while True:
                    time.sleep(10)
            except KeyboardInterrupt:
                print("\nüëã Script Auto-Connect arr√™t√©")
                print("üîç Le monitoring continue en arri√®re-plan")
        else:
            print("\n‚ùå √âchec de la connexion automatique")
            return 1

    except Exception as e:
        print(f"\nüí• Erreur fatale: {e}")
        return 1
    finally:
        connector.cleanup()

    return 0


if __name__ == "__main__":
    sys.exit(main())
