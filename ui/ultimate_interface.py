"""
Ultimate Interface - Interface ultime du syst√®me YOLO collaboratif
Int√®gre tous les syst√®mes : datasets, apprentissage, multi-cibles, temps r√©el
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import sys
import os
import time
import json
from datetime import datetime
from pathlib import Path
import cv2
import numpy as np
import pyautogui
from PIL import Image, ImageTk, ImageDraw

# Ajouter le r√©pertoire parent au path
parent_dir = Path(__file__).parent.parent
sys.path.insert(0, str(parent_dir))

# Imports des syst√®mes
try:
    from ultralytics import YOLO
    from learning.dataset_manager import DatasetManager
    from learning.collaborative_learning import CollaborativeLearningSystem
    from realtime.multi_target_stream import MultiTargetStream
    from utils.multi_screen import TargetSelector
    from ui.zone_selector import ZoneManager
    # Nouveaux imports pour le gestionnaire intelligent
    from core.intelligent_storage_manager import IntelligentStorageManager
    from core.professional_dataset_manager import ProfessionalDatasetManager
    IMPORTS_OK = True
except ImportError as e:
    IMPORTS_OK = False
    IMPORT_ERROR = str(e)

class UltimateInterface:
    """Interface ultime du syst√®me YOLO collaboratif"""
    
    def __init__(self):
        # Variables d'√©tat
        self.is_running = False
        self.model = None
        self.dataset_manager = None
        self.learning_system = None
        self.multi_stream = None
        self.target_selector = None
        self.zone_manager = None
        
        # Nouveaux gestionnaires intelligents
        self.storage_manager = None
        self.professional_dataset_manager = None
        
        # Configuration des couleurs
        self.colors = {
            'primary': '#007bff',
            'success': '#28a745',
            'warning': '#ffc107', 
            'danger': '#dc3545',
            'info': '#17a2b8',
            'dark': '#343a40',
            'purple': '#6f42c1'
        }
        
        # Interface principale
        self.root = tk.Tk()
        self.setup_main_window()
        self.create_ultimate_interface()
        
        # Initialisation diff√©r√©e
        self.root.after(100, self.delayed_init)
    
    def setup_main_window(self):
        """Configure la fen√™tre principale"""
        self.root.title("üöÄ SYST√àME YOLO ULTIME - Plateforme Collaborative")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f8f9fa')
        
        # Centrer la fen√™tre
        self.center_window()
        
        # Gestionnaire de fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def create_ultimate_interface(self):
        """Cr√©e l'interface ultime"""
        # Header avec titre et statut
        self.create_header()
        
        # Notebook principal avec onglets
        self.create_main_notebook()
        
        # Footer avec statistiques globales
        self.create_footer()
    
    def create_header(self):
        """Cr√©e l'en-t√™te de l'interface"""
        header_frame = tk.Frame(self.root, bg=self.colors['dark'], height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        # Titre principal
        title_label = tk.Label(
            header_frame,
            text="üöÄ SYST√àME YOLO ULTIME",
            font=('Arial', 20, 'bold'),
            fg='white',
            bg=self.colors['dark']
        )
        title_label.pack(side=tk.LEFT, padx=20, pady=20)
        
        # Sous-titre
        subtitle_label = tk.Label(
            header_frame,
            text="Plateforme Collaborative d'Intelligence Artificielle",
            font=('Arial', 12),
            fg='#adb5bd',
            bg=self.colors['dark']
        )
        subtitle_label.pack(side=tk.LEFT, padx=(0, 20), pady=(35, 20))
        
        # Statut global
        self.status_frame = tk.Frame(header_frame, bg=self.colors['dark'])
        self.status_frame.pack(side=tk.RIGHT, padx=20, pady=20)
        
        self.global_status = tk.Label(
            self.status_frame,
            text="üî¥ Initialisation...",
            font=('Arial', 12, 'bold'),
            fg='white',
            bg=self.colors['dark']
        )
        self.global_status.pack()
    
    def create_main_notebook(self):
        """Cr√©e le notebook principal avec tous les onglets"""
        # Style pour le notebook
        style = ttk.Style()
        style.configure('Ultimate.TNotebook.Tab', padding=[20, 10])
        
        self.main_notebook = ttk.Notebook(self.root, style='Ultimate.TNotebook')
        self.main_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Onglet 1: Dashboard Principal
        self.create_dashboard_tab()
        
        # Onglet 2: Datasets & Base Globale
        self.create_datasets_tab()
        
        # Onglet 3: Apprentissage Collaboratif
        self.create_learning_tab()
        
        # Onglet 4: Stream Multi-Cibles
        self.create_stream_tab()
        
        # Onglet 5: Configuration Avanc√©e
        self.create_config_tab()
    
    def create_dashboard_tab(self):
        """Cr√©e l'onglet dashboard principal"""
        dashboard_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(dashboard_frame, text="üìä Dashboard")
        
        # Vue d'ensemble
        overview_frame = ttk.LabelFrame(dashboard_frame, text="üéØ Vue d'Ensemble", padding="15")
        overview_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # M√©triques principales
        metrics_frame = tk.Frame(overview_frame)
        metrics_frame.pack(fill=tk.X)
        
        # Cartes de m√©triques
        self.create_metric_card(metrics_frame, "üìö Datasets", "0", "Datasets install√©s", self.colors['info'])
        self.create_metric_card(metrics_frame, "üé® Objets", "0", "Objets personnels", self.colors['success'])
        self.create_metric_card(metrics_frame, "üñ•Ô∏è Cibles", "0", "Cibles actives", self.colors['warning'])
        self.create_metric_card(metrics_frame, "üèÜ Score", "0", "Score total", self.colors['purple'])
        
        # Actions rapides
        actions_frame = ttk.LabelFrame(dashboard_frame, text="‚ö° Actions Rapides", padding="15")
        actions_frame.pack(fill=tk.X, padx=10, pady=5)
        
        quick_actions = [
            ("üöÄ D√©marrer Stream", self.quick_start_stream, self.colors['success']),
            ("üì• Installer Datasets", self.quick_install_datasets, self.colors['info']),
            ("üß† Mode Apprentissage", self.quick_learning_mode, self.colors['purple']),
            ("üéØ S√©lectionner Cibles", self.quick_select_targets, self.colors['warning'])
        ]
        
        for text, command, color in quick_actions:
            btn = tk.Button(
                actions_frame,
                text=text,
                font=('Arial', 11, 'bold'),
                bg=color,
                fg='white',
                command=command,
                relief='flat',
                padx=20,
                pady=10
            )
            btn.pack(side=tk.LEFT, padx=5)
        
        # Vue temps r√©el
        realtime_frame = ttk.LabelFrame(dashboard_frame, text="üìπ Vue Temps R√©el", padding="10")
        realtime_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Canvas pour affichage temps r√©el
        self.realtime_canvas = tk.Canvas(realtime_frame, bg='black', height=300)
        self.realtime_canvas.pack(fill=tk.BOTH, expand=True)
        
        # Log temps r√©el
        log_frame = ttk.LabelFrame(dashboard_frame, text="üìã Log Temps R√©el", padding="10")
        log_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.dashboard_log = tk.Text(log_frame, height=8, bg='#f8f9fa', font=('Consolas', 9))
        log_scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.dashboard_log.yview)
        self.dashboard_log.configure(yscrollcommand=log_scrollbar.set)
        
        self.dashboard_log.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def create_metric_card(self, parent, title, value, subtitle, color):
        """Cr√©e une carte de m√©trique"""
        card_frame = tk.Frame(parent, bg=color, relief='flat', bd=0)
        card_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        # Titre
        title_label = tk.Label(
            card_frame,
            text=title,
            font=('Arial', 12, 'bold'),
            fg='white',
            bg=color
        )
        title_label.pack(pady=(10, 5))
        
        # Valeur
        value_label = tk.Label(
            card_frame,
            text=value,
            font=('Arial', 24, 'bold'),
            fg='white',
            bg=color
        )
        value_label.pack()
        
        # Sous-titre
        subtitle_label = tk.Label(
            card_frame,
            text=subtitle,
            font=('Arial', 10),
            fg='white',
            bg=color
        )
        subtitle_label.pack(pady=(0, 10))
        
        return card_frame
    
    def create_datasets_tab(self):
        """Cr√©e l'onglet gestion des datasets"""
        datasets_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(datasets_frame, text="üìö Datasets")
        
        # Panneau de contr√¥le datasets
        control_frame = ttk.LabelFrame(datasets_frame, text="üéõÔ∏è Contr√¥le Datasets", padding="15")
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Boutons de contr√¥le
        control_buttons = tk.Frame(control_frame)
        control_buttons.pack(fill=tk.X)
        
        tk.Button(control_buttons, text="üì• Installer Essentiels", 
                 bg=self.colors['success'], fg='white', font=('Arial', 11),
                 command=self.install_essential_datasets).pack(side=tk.LEFT, padx=5)
        
        tk.Button(control_buttons, text="üîç Parcourir Disponibles", 
                 bg=self.colors['info'], fg='white', font=('Arial', 11),
                 command=self.browse_available_datasets).pack(side=tk.LEFT, padx=5)
        
        tk.Button(control_buttons, text="üìä Statistiques", 
                 bg=self.colors['warning'], fg='white', font=('Arial', 11),
                 command=self.show_dataset_stats).pack(side=tk.LEFT, padx=5)
        
        # Liste des datasets
        datasets_list_frame = ttk.LabelFrame(datasets_frame, text="üìã Datasets Install√©s", padding="10")
        datasets_list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Treeview pour les datasets
        columns = ('Nom', 'Cat√©gorie', 'Classes', 'Images', 'Taille')
        self.datasets_tree = ttk.Treeview(datasets_list_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.datasets_tree.heading(col, text=col)
            self.datasets_tree.column(col, width=150)
        
        datasets_scrollbar = ttk.Scrollbar(datasets_list_frame, orient=tk.VERTICAL, command=self.datasets_tree.yview)
        self.datasets_tree.configure(yscrollcommand=datasets_scrollbar.set)
        
        self.datasets_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        datasets_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def create_learning_tab(self):
        """Cr√©e l'onglet apprentissage collaboratif"""
        learning_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(learning_frame, text="üß† Apprentissage")
        
        # Modes d'apprentissage
        modes_frame = ttk.LabelFrame(learning_frame, text="üéØ Modes d'Apprentissage", padding="15")
        modes_frame.pack(fill=tk.X, padx=10, pady=5)
        
        modes = [
            ("üé® Cr√©ation", "creation", "Cr√©er de nouveaux objets", self.colors['success']),
            ("‚úÖ Validation", "validation", "Valider les d√©tections", self.colors['info']),
            ("üîß Correction", "correction", "Corriger les erreurs", self.colors['warning']),
            ("üåç Partage", "sharing", "Partager avec la communaut√©", self.colors['purple'])
        ]
        
        for text, mode_key, desc, color in modes:
            btn = tk.Button(
                modes_frame,
                text=f"{text}\n{desc}",
                font=('Arial', 10),
                bg=color,
                fg='white',
                command=lambda k=mode_key: self.activate_learning_mode(k),
                relief='flat',
                padx=15,
                pady=10
            )
            btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Statistiques d'apprentissage
        stats_frame = ttk.LabelFrame(learning_frame, text="üìä Vos Statistiques", padding="15")
        stats_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.learning_stats_text = tk.Text(stats_frame, height=6, bg='#f8f9fa', font=('Arial', 10))
        self.learning_stats_text.pack(fill=tk.X)
        
        # Objets personnels
        personal_frame = ttk.LabelFrame(learning_frame, text="üé® Vos Objets Personnels", padding="10")
        personal_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Liste des objets personnels
        personal_columns = ('Nom', 'Cat√©gorie', 'Exemples', 'Pr√©cision', 'Cr√©√© le')
        self.personal_tree = ttk.Treeview(personal_frame, columns=personal_columns, show='headings', height=10)
        
        for col in personal_columns:
            self.personal_tree.heading(col, text=col)
            self.personal_tree.column(col, width=120)
        
        personal_scrollbar = ttk.Scrollbar(personal_frame, orient=tk.VERTICAL, command=self.personal_tree.yview)
        self.personal_tree.configure(yscrollcommand=personal_scrollbar.set)
        
        self.personal_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        personal_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def create_stream_tab(self):
        """Cr√©e l'onglet stream multi-cibles"""
        stream_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(stream_frame, text="üìπ Stream Multi-Cibles")
        
        # Contr√¥les de stream
        stream_control_frame = ttk.LabelFrame(stream_frame, text="üéõÔ∏è Contr√¥le Stream", padding="15")
        stream_control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Boutons de contr√¥le stream
        stream_buttons = tk.Frame(stream_control_frame)
        stream_buttons.pack(fill=tk.X)
        
        self.stream_start_btn = tk.Button(
            stream_buttons,
            text="üöÄ D√âMARRER STREAM",
            font=('Arial', 12, 'bold'),
            bg=self.colors['success'],
            fg='white',
            command=self.toggle_stream
        )
        self.stream_start_btn.pack(side=tk.LEFT, padx=5)
        
        tk.Button(stream_buttons, text="üñ•Ô∏è Ajouter √âcran", 
                 bg=self.colors['info'], fg='white', font=('Arial', 11),
                 command=self.add_screen_target).pack(side=tk.LEFT, padx=5)
        
        tk.Button(stream_buttons, text="ü™ü Ajouter Fen√™tre", 
                 bg=self.colors['warning'], fg='white', font=('Arial', 11),
                 command=self.add_window_target).pack(side=tk.LEFT, padx=5)
        
        # Configuration FPS
        fps_frame = tk.Frame(stream_control_frame)
        fps_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(fps_frame, text="FPS Global:", font=('Arial', 10)).pack(side=tk.LEFT)
        self.fps_var = tk.IntVar(value=30)
        fps_scale = tk.Scale(fps_frame, from_=10, to=60, variable=self.fps_var, 
                           orient='horizontal', length=200)
        fps_scale.pack(side=tk.LEFT, padx=10)
        
        # Cibles actives
        targets_frame = ttk.LabelFrame(stream_frame, text="üéØ Cibles Actives", padding="10")
        targets_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Liste des cibles
        targets_columns = ('ID', 'Type', 'Nom', 'FPS', 'Statut', 'Captures')
        self.targets_tree = ttk.Treeview(targets_frame, columns=targets_columns, show='headings', height=8)
        
        for col in targets_columns:
            self.targets_tree.heading(col, text=col)
            self.targets_tree.column(col, width=120)
        
        targets_scrollbar = ttk.Scrollbar(targets_frame, orient=tk.VERTICAL, command=self.targets_tree.yview)
        self.targets_tree.configure(yscrollcommand=targets_scrollbar.set)
        
        self.targets_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        targets_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Statistiques de performance
        perf_frame = ttk.LabelFrame(stream_frame, text="üìà Performance", padding="10")
        perf_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.performance_text = tk.Text(perf_frame, height=4, bg='#f8f9fa', font=('Consolas', 9))
        self.performance_text.pack(fill=tk.X)
    
    def create_config_tab(self):
        """Cr√©e l'onglet configuration avanc√©e"""
        config_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(config_frame, text="‚öôÔ∏è Configuration")
        
        # Configuration YOLO
        yolo_frame = ttk.LabelFrame(config_frame, text="ü§ñ Configuration YOLO", padding="15")
        yolo_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Seuil de confiance
        conf_frame = tk.Frame(yolo_frame)
        conf_frame.pack(fill=tk.X, pady=5)
        
        tk.Label(conf_frame, text="Seuil de confiance:", font=('Arial', 10)).pack(side=tk.LEFT)
        self.confidence_var = tk.DoubleVar(value=0.5)
        conf_scale = tk.Scale(conf_frame, from_=0.1, to=0.9, variable=self.confidence_var, 
                            orient='horizontal', resolution=0.1, length=300)
        conf_scale.pack(side=tk.LEFT, padx=10)
        
        self.conf_label = tk.Label(conf_frame, text="50%", font=('Arial', 10, 'bold'))
        self.conf_label.pack(side=tk.LEFT, padx=10)
        self.confidence_var.trace('w', self.update_confidence_display)
        
        # Configuration des actions
        actions_frame = ttk.LabelFrame(config_frame, text="‚ö° Actions Automatiques", padding="15")
        actions_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(actions_frame, text="üéØ Configurer Actions", 
                 bg=self.colors['primary'], fg='white', font=('Arial', 11),
                 command=self.configure_actions).pack(side=tk.LEFT, padx=5)
        
        tk.Button(actions_frame, text="üìê Configurer Zones", 
                 bg=self.colors['warning'], fg='white', font=('Arial', 11),
                 command=self.configure_zones).pack(side=tk.LEFT, padx=5)
        
        # Sauvegarde/Chargement
        save_frame = ttk.LabelFrame(config_frame, text="üíæ Sauvegarde", padding="15")
        save_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(save_frame, text="üíæ Sauvegarder Config", 
                 bg=self.colors['success'], fg='white', font=('Arial', 11),
                 command=self.save_config).pack(side=tk.LEFT, padx=5)
        
        tk.Button(save_frame, text="üìÇ Charger Config", 
                 bg=self.colors['info'], fg='white', font=('Arial', 11),
                 command=self.load_config).pack(side=tk.LEFT, padx=5)
        
        tk.Button(save_frame, text="üîÑ Reset Config", 
                 bg=self.colors['danger'], fg='white', font=('Arial', 11),
                 command=self.reset_config).pack(side=tk.LEFT, padx=5)
    
    def create_footer(self):
        """Cr√©e le footer avec statistiques globales"""
        footer_frame = tk.Frame(self.root, bg=self.colors['dark'], height=40)
        footer_frame.pack(fill=tk.X)
        footer_frame.pack_propagate(False)
        
        # Statistiques globales
        self.footer_stats = tk.Label(
            footer_frame,
            text="üìä Pr√™t | üéØ 0 d√©tections | ‚è±Ô∏è 0ms | üíæ 0MB",
            font=('Arial', 10),
            fg='white',
            bg=self.colors['dark']
        )
        self.footer_stats.pack(side=tk.LEFT, padx=20, pady=10)
        
        # Version et copyright
        version_label = tk.Label(
            footer_frame,
            text="v2.0 - Syst√®me YOLO Ultime ¬© 2025",
            font=('Arial', 9),
            fg='#adb5bd',
            bg=self.colors['dark']
        )
        version_label.pack(side=tk.RIGHT, padx=20, pady=10)
    
    def delayed_init(self):
        """Initialisation diff√©r√©e des syst√®mes"""
        if not IMPORTS_OK:
            self.log_message("‚ùå ERREUR: Modules manquants!")
            self.log_message(f"D√©tails: {IMPORT_ERROR}")
            self.global_status.configure(text="‚ùå Erreur Modules", fg='red')
            return
        
        try:
            self.log_message("üîÑ Initialisation des syst√®mes...")
            
            # Charger le mod√®le YOLO
            self.log_message("ü§ñ Chargement mod√®le YOLO...")
            self.model = YOLO('yolov8n.pt')
            self.log_message("‚úÖ Mod√®le YOLO charg√©!")
            
            # Initialiser le gestionnaire de datasets
            self.log_message("üìö Initialisation gestionnaire datasets...")
            self.dataset_manager = DatasetManager()
            self.log_message("‚úÖ Gestionnaire datasets pr√™t!")
            
            # Initialiser les gestionnaires intelligents
            self.log_message("üß† Initialisation gestionnaire de stockage intelligent...")
            self.storage_manager = IntelligentStorageManager()
            self.log_message("‚úÖ Gestionnaire de stockage intelligent pr√™t!")
            
            self.log_message("üéØ Initialisation gestionnaire de datasets professionnel...")
            self.professional_dataset_manager = ProfessionalDatasetManager()
            self.log_message("‚úÖ Gestionnaire de datasets professionnel pr√™t!")
            
            # Initialiser le syst√®me d'apprentissage
            self.log_message("üß† Initialisation apprentissage collaboratif...")
            self.learning_system = CollaborativeLearningSystem(
                self.dataset_manager, 
                self.log_message
            )
            self.log_message("‚úÖ Syst√®me d'apprentissage pr√™t!")
            
            # Initialiser le stream multi-cibles
            self.log_message("üìπ Initialisation stream multi-cibles...")
            self.multi_stream = MultiTargetStream(self.model, self.log_message)
            self.multi_stream.add_result_callback(self.on_detection_result)
            self.log_message("‚úÖ Stream multi-cibles pr√™t!")
            
            # Initialiser les s√©lecteurs
            self.target_selector = TargetSelector(self.log_message)
            self.zone_manager = ZoneManager(self.log_message)
            
            # Mettre √† jour l'interface
            self.refresh_all_data()
            
            self.global_status.configure(text="‚úÖ Syst√®me Pr√™t", fg='lightgreen')
            self.log_message("üöÄ Tous les syst√®mes initialis√©s avec succ√®s!")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur initialisation: {e}")
            self.global_status.configure(text="‚ùå Erreur Init", fg='red')
    
    def log_message(self, message):
        """Ajoute un message au log"""
        def update_ui():
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_entry = f"[{timestamp}] {message}\n"
            
            if hasattr(self, 'dashboard_log'):
                self.dashboard_log.insert(tk.END, log_entry)
                self.dashboard_log.see(tk.END)
                
                # Limiter le nombre de lignes
                lines = self.dashboard_log.get("1.0", tk.END).count('\n')
                if lines > 100:
                    self.dashboard_log.delete("1.0", "20.0")
        
        self.root.after(0, update_ui)
    
    def on_detection_result(self, result):
        """Callback pour les r√©sultats de d√©tection"""
        # Mettre √† jour l'affichage temps r√©el
        self.update_realtime_display(result)
        
        # Traiter pour l'apprentissage si actif
        if self.learning_system and self.learning_system.learning_active:
            for detection in result.detections:
                self.learning_system.process_detection_for_learning(result.image, detection)
    
    def update_realtime_display(self, result):
        """Met √† jour l'affichage temps r√©el"""
        try:
            # Redimensionner l'image pour le canvas
            image = result.image.copy()
            canvas_width = self.realtime_canvas.winfo_width()
            canvas_height = self.realtime_canvas.winfo_height()
            
            if canvas_width > 1 and canvas_height > 1:
                height, width = image.shape[:2]
                ratio = min(canvas_width / width, canvas_height / height)
                new_width = int(width * ratio)
                new_height = int(height * ratio)
                
                resized_image = cv2.resize(image, (new_width, new_height))
                
                # Dessiner les d√©tections
                for detection in result.detections:
                    x1, y1, x2, y2 = detection['bbox']
                    x1, y1, x2, y2 = int(x1 * ratio), int(y1 * ratio), int(x2 * ratio), int(y2 * ratio)
                    
                    # Couleur selon la classe
                    color = (0, 255, 0)  # Vert par d√©faut
                    cv2.rectangle(resized_image, (x1, y1), (x2, y2), color, 2)
                    
                    # Texte
                    text = f"{detection['class_name']}: {detection['confidence']:.2f}"
                    cv2.putText(resized_image, text, (x1, y1-10), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
                
                # Convertir pour Tkinter
                image_rgb = cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB)
                image_pil = Image.fromarray(image_rgb)
                image_tk = ImageTk.PhotoImage(image_pil)
                
                # Afficher dans le canvas
                self.realtime_canvas.delete("all")
                self.realtime_canvas.create_image(
                    canvas_width//2, canvas_height//2, 
                    image=image_tk, anchor=tk.CENTER
                )
                
                # Garder une r√©f√©rence pour √©viter le garbage collection
                self.realtime_canvas.image = image_tk
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur affichage temps r√©el: {e}")
    
    # Actions rapides du dashboard
    def quick_start_stream(self):
        """Action rapide: d√©marrer le stream"""
        if not self.multi_stream:
            messagebox.showerror("Erreur", "Stream non initialis√©!")
            return
        
        if not self.multi_stream.stream_targets:
            # Ajouter l'√©cran principal par d√©faut
            self.multi_stream.add_screen_target(0, 30)
        
        self.toggle_stream()
    
    def quick_install_datasets(self):
        """Action rapide: installer les datasets essentiels"""
        if not self.dataset_manager:
            messagebox.showerror("Erreur", "Gestionnaire de datasets non initialis√©!")
            return
        
        self.install_essential_datasets()
    
    def quick_learning_mode(self):
        """Action rapide: activer le mode apprentissage"""
        if not self.learning_system:
            messagebox.showerror("Erreur", "Syst√®me d'apprentissage non initialis√©!")
            return
        
        # Ouvrir l'interface d'apprentissage
        self.learning_system.create_learning_interface(self.root)
    
    def quick_select_targets(self):
        """Action rapide: s√©lectionner des cibles"""
        if not self.target_selector:
            messagebox.showerror("Erreur", "S√©lecteur de cibles non initialis√©!")
            return
        
        self.target_selector.show_target_selector(self.root)
    
    # Fonctions des onglets
    def install_essential_datasets(self):
        """Installe les datasets essentiels"""
        if not self.dataset_manager:
            messagebox.showerror("Erreur", "Gestionnaire de datasets non initialis√©!")
            return
        
        def install_thread():
            try:
                self.log_message("üì• Installation des datasets essentiels...")
                results = self.dataset_manager.install_essential_datasets()
                
                success_count = sum(1 for success in results.values() if success)
                total_count = len(results)
                
                self.log_message(f"‚úÖ Installation termin√©e: {success_count}/{total_count} r√©ussies")
                self.refresh_datasets_list()
                
            except Exception as e:
                self.log_message(f"‚ùå Erreur installation: {e}")
        
        threading.Thread(target=install_thread, daemon=True).start()
    
    def browse_available_datasets(self):
        """Parcourt les datasets disponibles"""
        if not self.dataset_manager:
            messagebox.showerror("Erreur", "Gestionnaire de datasets non initialis√©!")
            return
        
        # Cr√©er une fen√™tre pour parcourir les datasets
        browse_window = tk.Toplevel(self.root)
        browse_window.title("üìö Datasets Disponibles")
        browse_window.geometry("800x600")
        
        frame = ttk.Frame(browse_window, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(frame, text="üìö Datasets Disponibles", 
                 font=('Arial', 16, 'bold')).pack(pady=10)
        
        # Liste des datasets disponibles
        datasets = self.dataset_manager.get_available_datasets()
        
        for dataset in datasets[:10]:  # Afficher les 10 premiers
            dataset_frame = ttk.Frame(frame)
            dataset_frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(dataset_frame, text=f"‚Ä¢ {dataset['name']}", 
                     font=('Arial', 12, 'bold')).pack(anchor='w')
            ttk.Label(dataset_frame, text=f"  Classes: {dataset.get('classes', 'N/A')} | "
                                         f"Images: {dataset.get('images', 'N/A')}").pack(anchor='w')
    
    def show_dataset_stats(self):
        """Affiche les statistiques des datasets avec analyse intelligente"""
        if not self.dataset_manager or not self.professional_dataset_manager or not self.storage_manager:
            messagebox.showerror("Erreur", "Gestionnaires non initialis√©s!")
            return
        
        # Cr√©er une fen√™tre d√©di√©e pour les statistiques avanc√©es
        stats_window = tk.Toplevel(self.root)
        stats_window.title("üìä Statistiques Avanc√©es des Datasets")
        stats_window.geometry("900x700")
        stats_window.configure(bg='#f8f9fa')
        
        # Notebook pour organiser les statistiques
        stats_notebook = ttk.Notebook(stats_window)
        stats_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Onglet 1: Statistiques g√©n√©rales
        general_frame = ttk.Frame(stats_notebook)
        stats_notebook.add(general_frame, text="üìä G√©n√©ral")
        
        try:
            # Statistiques du gestionnaire classique
            classic_stats = self.dataset_manager.get_dataset_stats()
            
            # Statistiques du gestionnaire professionnel
            pro_stats = self.professional_dataset_manager.get_dataset_statistics()
            
            # Statistiques de stockage
            storage_stats = self.storage_manager.get_storage_statistics()
            
            general_text = tk.Text(general_frame, font=('Consolas', 10), wrap='word')
            general_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            stats_content = f"""
üìä STATISTIQUES G√âN√âRALES DES DATASETS
{'='*60}

üéØ DATASETS CLASSIQUES:
‚Ä¢ Total datasets: {classic_stats['global'].get('total_datasets', 0)}
‚Ä¢ Datasets install√©s: {classic_stats['global'].get('installed_count', 0)}
‚Ä¢ Classes totales: {classic_stats['global'].get('total_classes', 0)}
‚Ä¢ Images totales: {classic_stats['global'].get('total_images', 0):,}
‚Ä¢ Taille totale: {classic_stats['global'].get('total_size_mb', 0):.1f} MB

üöÄ DATASETS PROFESSIONNELS:
‚Ä¢ Total datasets: {pro_stats.get('total_datasets', 0)}
‚Ä¢ Images totales: {pro_stats.get('total_images', 0):,}
‚Ä¢ Annotations: {pro_stats.get('total_annotations', 0):,}
‚Ä¢ Taille totale: {pro_stats.get('total_size_gb', 0):.2f} GB
‚Ä¢ Qualit√© moyenne: {pro_stats.get('average_quality', 0):.1%}

üíæ STOCKAGE INTELLIGENT:
‚Ä¢ Disques analys√©s: {storage_stats.get('drives_analyzed', 0)}
‚Ä¢ Espace total disponible: {storage_stats.get('total_free_space_gb', 0):.1f} GB
‚Ä¢ Espace utilis√© datasets: {storage_stats.get('datasets_space_used_gb', 0):.1f} GB
‚Ä¢ Efficacit√© stockage: {storage_stats.get('storage_efficiency', 0):.1%}

üìà PERFORMANCE:
‚Ä¢ Vitesse lecture moyenne: {storage_stats.get('avg_read_speed_mbps', 0):.0f} MB/s
‚Ä¢ Vitesse √©criture moyenne: {storage_stats.get('avg_write_speed_mbps', 0):.0f} MB/s
‚Ä¢ Sant√© moyenne des disques: {storage_stats.get('avg_drive_health', 0):.1%}
"""
            
            # Ajouter les statistiques par cat√©gorie
            if classic_stats['by_category']:
                stats_content += "\nüè∑Ô∏è R√âPARTITION PAR CAT√âGORIE:\n"
                for cat_stat in classic_stats['by_category']:
                    stats_content += f"‚Ä¢ {cat_stat['category']}: {cat_stat['count']} datasets, {cat_stat['classes']} classes\n"
            
            general_text.insert(tk.END, stats_content)
            general_text.config(state='disabled')
            
        except Exception as e:
            error_text = f"‚ùå Erreur lors du calcul des statistiques: {e}"
            general_text.insert(tk.END, error_text)
            general_text.config(state='disabled')
        
        # Onglet 2: Analyse de stockage
        storage_frame = ttk.Frame(stats_notebook)
        stats_notebook.add(storage_frame, text="üíæ Stockage")
        
        try:
            drives = self.storage_manager.scan_available_drives()
            
            storage_text = tk.Text(storage_frame, font=('Consolas', 10), wrap='word')
            storage_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            storage_content = f"""
üíæ ANALYSE D√âTAILL√âE DU STOCKAGE
{'='*60}

üìä R√âSUM√â:
‚Ä¢ Nombre de disques: {len(drives)}
‚Ä¢ Recommandations g√©n√©r√©es: {len([d for d in drives if d.health_score > 0.8])} disques optimaux

üñ•Ô∏è D√âTAILS PAR DISQUE:
"""
            
            for drive in drives:
                drive_type = "SSD" if drive.is_ssd else "HDD"
                system_mark = " (SYST√àME)" if drive.is_system_drive else ""
                
                storage_content += f"""
üìÅ {drive.device} - {drive_type}{system_mark}
   üíæ Espace: {drive.free_bytes/(1024**3):.1f}GB libres / {drive.total_bytes/(1024**3):.1f}GB total
   üìä Usage: {drive.usage_percent:.1f}%
   ‚ö° Performance: R={drive.read_speed_mbps:.0f}MB/s, W={drive.write_speed_mbps:.0f}MB/s
   ‚ù§Ô∏è Sant√©: {drive.health_score:.1%}
   üéØ Score global: {drive.overall_score:.2f}
   {'‚úÖ RECOMMAND√â' if drive.overall_score > 0.8 else '‚ö†Ô∏è ACCEPTABLE' if drive.overall_score > 0.6 else '‚ùå NON RECOMMAND√â'}
"""
            
            storage_text.insert(tk.END, storage_content)
            storage_text.config(state='disabled')
            
        except Exception as e:
            error_text = f"‚ùå Erreur analyse stockage: {e}"
            storage_text.insert(tk.END, error_text)
            storage_text.config(state='disabled')
        
        # Onglet 3: Recommandations
        recommendations_frame = ttk.Frame(stats_notebook)
        stats_notebook.add(recommendations_frame, text="üí° Recommandations")
        
        recommendations_text = tk.Text(recommendations_frame, font=('Arial', 11), wrap='word')
        recommendations_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        try:
            # G√©n√©rer des recommandations intelligentes
            recommendations = self._generate_intelligent_recommendations()
            
            recommendations_content = f"""
üí° RECOMMANDATIONS INTELLIGENTES
{'='*60}

{recommendations}
"""
            
            recommendations_text.insert(tk.END, recommendations_content)
            recommendations_text.config(state='disabled')
            
        except Exception as e:
            error_text = f"‚ùå Erreur g√©n√©ration recommandations: {e}"
            recommendations_text.insert(tk.END, error_text)
            recommendations_text.config(state='disabled')
        
        # Boutons d'actions
        actions_frame = tk.Frame(stats_window, bg='#f8f9fa')
        actions_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(actions_frame, text="üîÑ Actualiser", 
                 bg=self.colors['info'], fg='white', font=('Arial', 10),
                 command=lambda: self.show_dataset_stats()).pack(side=tk.LEFT, padx=5)
        
        tk.Button(actions_frame, text="üíæ Exporter Rapport", 
                 bg=self.colors['success'], fg='white', font=('Arial', 10),
                 command=lambda: self._export_stats_report(stats_window)).pack(side=tk.LEFT, padx=5)
        
        tk.Button(actions_frame, text="üßπ Optimiser Stockage", 
                 bg=self.colors['warning'], fg='white', font=('Arial', 10),
                 command=self._optimize_storage).pack(side=tk.LEFT, padx=5)
    
    def _generate_intelligent_recommendations(self):
        """G√©n√®re des recommandations intelligentes bas√©es sur l'analyse"""
        recommendations = []
        
        try:
            # Analyser le stockage
            drives = self.storage_manager.scan_available_drives()
            storage_stats = self.storage_manager.get_storage_statistics()
            dataset_stats = self.professional_dataset_manager.get_dataset_statistics()
            
            # Recommandations de stockage
            best_drives = [d for d in drives if d.overall_score > 0.8]
            if best_drives:
                recommendations.append(f"‚úÖ STOCKAGE OPTIMAL: Utilisez {best_drives[0].device} pour vos nouveaux datasets (score: {best_drives[0].overall_score:.2f})")
            else:
                recommendations.append("‚ö†Ô∏è STOCKAGE: Aucun disque optimal d√©tect√©. Consid√©rez un upgrade SSD.")
            
            # Recommandations d'espace
            total_free = sum(d.free_bytes for d in drives) / (1024**3)
            if total_free < 10:
                recommendations.append("üö® ESPACE CRITIQUE: Moins de 10GB libres. Nettoyage urgent recommand√©!")
            elif total_free < 50:
                recommendations.append("‚ö†Ô∏è ESPACE FAIBLE: Moins de 50GB libres. Planifiez un nettoyage.")
            
            # Recommandations de performance
            avg_read_speed = sum(d.read_speed_mbps for d in drives) / len(drives) if drives else 0
            if avg_read_speed < 100:
                recommendations.append("üêå PERFORMANCE: Vitesse de lecture faible. Un SSD am√©liorerait les performances.")
            
            # Recommandations de datasets
            if dataset_stats.get('total_datasets', 0) == 0:
                recommendations.append("üìö DATASETS: Aucun dataset d√©tect√©. Commencez par installer les datasets essentiels.")
            elif dataset_stats.get('total_datasets', 0) < 3:
                recommendations.append("üìà DATASETS: Peu de datasets install√©s. Explorez le catalogue pour enrichir votre base.")
            
            # Recommandations de qualit√©
            avg_quality = dataset_stats.get('average_quality', 0)
            if avg_quality < 0.7:
                recommendations.append("üéØ QUALIT√â: Qualit√© moyenne des datasets faible. Validez et corrigez vos annotations.")
            elif avg_quality > 0.9:
                recommendations.append("üèÜ QUALIT√â: Excellente qualit√© des datasets! Partagez vos contributions.")
            
            # Recommandations de maintenance
            recommendations.append("üîß MAINTENANCE: Ex√©cutez un nettoyage de cache hebdomadaire pour optimiser les performances.")
            recommendations.append("üìä MONITORING: Surveillez r√©guli√®rement l'espace disque et les performances.")
            
            if not recommendations:
                recommendations.append("‚úÖ SYST√àME OPTIMAL: Votre configuration est excellente!")
            
        except Exception as e:
            recommendations.append(f"‚ùå Erreur g√©n√©ration recommandations: {e}")
        
        return "\n\n".join(f"‚Ä¢ {rec}" for rec in recommendations)
    
    def _export_stats_report(self, parent_window):
        """Exporte un rapport d√©taill√© des statistiques"""
        try:
            filename = filedialog.asksaveasfilename(
                parent=parent_window,
                title="Exporter le rapport de statistiques",
                defaultextension=".txt",
                filetypes=[("Fichiers texte", "*.txt"), ("Tous les fichiers", "*.*")]
            )
            
            if filename:
                # G√©n√©rer le rapport complet
                report_content = f"""
RAPPORT DE STATISTIQUES YOLO DATASET MANAGER
{'='*60}
G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{self._generate_full_stats_report()}
"""
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(report_content)
                
                messagebox.showinfo("Export", f"Rapport export√© vers:\n{filename}")
                self.log_message(f"üìÑ Rapport export√©: {filename}")
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'export: {e}")
    
    def _generate_full_stats_report(self):
        """G√©n√®re un rapport complet pour l'export"""
        try:
            classic_stats = self.dataset_manager.get_dataset_stats()
            pro_stats = self.professional_dataset_manager.get_dataset_statistics()
            storage_stats = self.storage_manager.get_storage_statistics()
            drives = self.storage_manager.scan_available_drives()
            
            report = f"""
STATISTIQUES G√âN√âRALES:
‚Ä¢ Datasets classiques: {classic_stats['global'].get('total_datasets', 0)}
‚Ä¢ Datasets professionnels: {pro_stats.get('total_datasets', 0)}
‚Ä¢ Images totales: {pro_stats.get('total_images', 0):,}
‚Ä¢ Annotations: {pro_stats.get('total_annotations', 0):,}
‚Ä¢ Taille totale: {pro_stats.get('total_size_gb', 0):.2f} GB

ANALYSE DE STOCKAGE:
‚Ä¢ Disques analys√©s: {len(drives)}
‚Ä¢ Espace libre total: {sum(d.free_bytes for d in drives)/(1024**3):.1f} GB
‚Ä¢ Vitesse lecture moyenne: {sum(d.read_speed_mbps for d in drives)/len(drives) if drives else 0:.0f} MB/s

RECOMMANDATIONS:
{self._generate_intelligent_recommendations()}
"""
            return report
            
        except Exception as e:
            return f"Erreur g√©n√©ration rapport: {e}"
    
    def _optimize_storage(self):
        """Lance l'optimisation du stockage"""
        try:
            # Cr√©er une fen√™tre de progression
            progress_window = tk.Toplevel(self.root)
            progress_window.title("üßπ Optimisation du Stockage")
            progress_window.geometry("500x300")
            progress_window.configure(bg='#f8f9fa')
            
            progress_label = tk.Label(progress_window, text="Optimisation en cours...", 
                                    font=('Arial', 12), bg='#f8f9fa')
            progress_label.pack(pady=20)
            
            progress_text = tk.Text(progress_window, height=15, font=('Consolas', 9))
            progress_text.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
            def optimization_thread():
                try:
                    # √âtape 1: Nettoyage du cache
                    progress_text.insert(tk.END, "üßπ Nettoyage du cache...\n")
                    progress_window.update()
                    
                    # Nettoyer les caches
                    if hasattr(self.storage_manager, 'drives_cache'):
                        self.storage_manager.drives_cache.clear()
                        self.storage_manager.cache_timestamp = 0
                    
                    if hasattr(self.professional_dataset_manager, 'datasets_cache'):
                        self.professional_dataset_manager.datasets_cache.clear()
                        self.professional_dataset_manager.cache_timestamp = 0
                    
                    progress_text.insert(tk.END, "‚úÖ Cache nettoy√©\n")
                    progress_window.update()
                    
                    # √âtape 2: Analyse des doublons
                    progress_text.insert(tk.END, "üîç Recherche de doublons...\n")
                    progress_window.update()
                    
                    # Simuler la recherche de doublons
                    time.sleep(1)
                    progress_text.insert(tk.END, "‚úÖ Aucun doublon d√©tect√©\n")
                    progress_window.update()
                    
                    # √âtape 3: Optimisation de l'emplacement
                    progress_text.insert(tk.END, "üìç Optimisation des emplacements...\n")
                    progress_window.update()
                    
                    # Analyser les emplacements optimaux
                    drives = self.storage_manager.scan_available_drives()
                    best_drive = max(drives, key=lambda d: d.overall_score) if drives else None
                    
                    if best_drive:
                        progress_text.insert(tk.END, f"‚úÖ Disque optimal identifi√©: {best_drive.device}\n")
                    
                    progress_window.update()
                    
                    # √âtape 4: Finalisation
                    progress_text.insert(tk.END, "\nüéâ Optimisation termin√©e!\n")
                    progress_text.insert(tk.END, "üí° Recommandations appliqu√©es avec succ√®s.\n")
                    
                    # Bouton de fermeture
                    close_btn = tk.Button(progress_window, text="Fermer", 
                                        command=progress_window.destroy,
                                        bg=self.colors['success'], fg='white')
                    close_btn.pack(pady=10)
                    
                    self.log_message("üßπ Optimisation du stockage termin√©e")
                    
                except Exception as e:
                    progress_text.insert(tk.END, f"‚ùå Erreur: {e}\n")
            
            # Lancer l'optimisation en arri√®re-plan
            threading.Thread(target=optimization_thread, daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'optimisation: {e}")
    
    def activate_learning_mode(self, mode_name):
        """Active un mode d'apprentissage"""
        if not self.learning_system:
            messagebox.showerror("Erreur", "Syst√®me d'apprentissage non initialis√©!")
            return
        
        success = self.learning_system.activate_mode(mode_name)
        if success:
            self.refresh_learning_stats()
    
    def toggle_stream(self):
        """Active/d√©sactive le stream"""
        if not self.multi_stream:
            messagebox.showerror("Erreur", "Stream non initialis√©!")
            return
        
        if not self.multi_stream.stream_active:
            success = self.multi_stream.start_stream()
            if success:
                self.stream_start_btn.configure(text="‚èπÔ∏è ARR√äTER STREAM", bg=self.colors['danger'])
                self.is_running = True
        else:
            self.multi_stream.stop_stream()
            self.stream_start_btn.configure(text="üöÄ D√âMARRER STREAM", bg=self.colors['success'])
            self.is_running = False
        
        self.refresh_targets_list()
    
    def add_screen_target(self):
        """Ajoute un √©cran comme cible"""
        if not self.multi_stream:
            messagebox.showerror("Erreur", "Stream non initialis√©!")
            return
        
        # Interface simple pour s√©lectionner l'√©cran
        screen_id = tk.simpledialog.askinteger("√âcran", "ID de l'√©cran (0 = principal):", 
                                              initialvalue=0, minvalue=0, maxvalue=10)
        if screen_id is not None:
            fps = tk.simpledialog.askinteger("FPS", "FPS pour cet √©cran:", 
                                           initialvalue=30, minvalue=10, maxvalue=60)
            if fps is not None:
                target_id = self.multi_stream.add_screen_target(screen_id, fps)
                if target_id:
                    self.refresh_targets_list()
    
    def add_window_target(self):
        """Ajoute une fen√™tre comme cible"""
        if not self.multi_stream:
            messagebox.showerror("Erreur", "Stream non initialis√©!")
            return
        
        # Interface simple pour s√©lectionner la fen√™tre
        window_title = tk.simpledialog.askstring("Fen√™tre", "Titre de la fen√™tre (partiel):")
        if window_title:
            fps = tk.simpledialog.askinteger("FPS", "FPS pour cette fen√™tre:", 
                                           initialvalue=30, minvalue=10, maxvalue=60)
            if fps is not None:
                target_id = self.multi_stream.add_window_target(window_title, fps)
                if target_id:
                    self.refresh_targets_list()
    
    def configure_actions(self):
        """Configure les actions automatiques"""
        messagebox.showinfo("Actions", "Configuration des actions - √Ä impl√©menter")
    
    def configure_zones(self):
        """Configure les zones de d√©tection"""
        if not self.zone_manager:
            messagebox.showerror("Erreur", "Gestionnaire de zones non initialis√©!")
            return
        
        self.zone_manager.add_zone_interactive()
    
    def save_config(self):
        """Sauvegarde la configuration"""
        try:
            config = {
                "confidence_threshold": self.confidence_var.get(),
                "fps_global": self.fps_var.get(),
                "timestamp": datetime.now().isoformat()
            }
            
            with open("ultimate_config.json", "w") as f:
                json.dump(config, f, indent=2)
            
            self.log_message("üíæ Configuration sauvegard√©e")
            messagebox.showinfo("Sauvegarde", "Configuration sauvegard√©e!")
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur sauvegarde: {e}")
    
    def load_config(self):
        """Charge la configuration"""
        try:
            if os.path.exists("ultimate_config.json"):
                with open("ultimate_config.json", "r") as f:
                    config = json.load(f)
                
                self.confidence_var.set(config.get("confidence_threshold", 0.5))
                self.fps_var.set(config.get("fps_global", 30))
                
                self.log_message("üìÇ Configuration charg√©e")
                messagebox.showinfo("Chargement", "Configuration charg√©e!")
            else:
                messagebox.showwarning("Chargement", "Aucune configuration trouv√©e")
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur chargement: {e}")
    
    def reset_config(self):
        """Remet la configuration par d√©faut"""
        if messagebox.askyesno("Reset", "Remettre la configuration par d√©faut ?"):
            self.confidence_var.set(0.5)
            self.fps_var.set(30)
            self.log_message("üîÑ Configuration remise par d√©faut")
    
    def update_confidence_display(self, *args):
        """Met √† jour l'affichage de confiance"""
        value = self.confidence_var.get()
        percentage = int(value * 100)
        self.conf_label.configure(text=f"{percentage}%")
        
        # Appliquer au stream si actif
        if self.multi_stream:
            self.multi_stream.set_confidence_threshold(value)
    
    def refresh_all_data(self):
        """Actualise toutes les donn√©es de l'interface"""
        self.refresh_datasets_list()
        self.refresh_learning_stats()
        self.refresh_targets_list()
        self.refresh_performance_stats()
    
    def refresh_datasets_list(self):
        """Actualise la liste des datasets"""
        if not self.dataset_manager:
            return
        
        try:
            # Vider la liste
            for item in self.datasets_tree.get_children():
                self.datasets_tree.delete(item)
            
            # Ajouter les datasets install√©s
            datasets = self.dataset_manager.get_installed_datasets()
            for dataset in datasets:
                self.datasets_tree.insert("", "end", values=(
                    dataset['name'],
                    dataset['category'],
                    dataset['classes_count'],
                    dataset['images_count'],
                    f"{dataset['size_mb']:.1f} MB"
                ))
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur refresh datasets: {e}")
    
    def refresh_learning_stats(self):
        """Actualise les statistiques d'apprentissage"""
        if not self.learning_system:
            return
        
        try:
            stats = self.learning_system.get_user_stats()
            
            stats_text = f"""üé® Objets cr√©√©s: {stats['objects_created']}
‚úÖ Validations: {stats['validations_made']}
üîß Corrections: {stats['corrections_applied']}
üåç Contributions: {stats['contributions_shared']}
üèÜ Score total: {stats['total_score']}
üìà Taux de pr√©cision: {stats['accuracy_rate']:.1f}%"""
            
            self.learning_stats_text.delete("1.0", tk.END)
            self.learning_stats_text.insert("1.0", stats_text)
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur refresh learning: {e}")
    
    def refresh_targets_list(self):
        """Actualise la liste des cibles"""
        if not self.multi_stream:
            return
        
        try:
            # Vider la liste
            for item in self.targets_tree.get_children():
                self.targets_tree.delete(item)
            
            # Ajouter les cibles actives
            for target_id, target in self.multi_stream.stream_targets.items():
                status = "üü¢ Actif" if target.active else "üî¥ Inactif"
                target_name = target.target_data.get('name', target.target_data.get('title', 'Inconnu'))
                
                self.targets_tree.insert("", "end", values=(
                    target_id,
                    target.target_type,
                    target_name,
                    target.fps_target,
                    status,
                    target.capture_count
                ))
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur refresh targets: {e}")
    
    def refresh_performance_stats(self):
        """Actualise les statistiques de performance"""
        if not self.multi_stream:
            return
        
        try:
            stats = self.multi_stream.get_stream_stats()
            
            perf_text = f"""üìä Frames captur√©es: {stats['total_frames_captured']}
üéØ D√©tections totales: {stats['total_detections']}
‚è±Ô∏è Temps traitement moyen: {stats['average_processing_time']:.1f}ms
üñ•Ô∏è Cibles actives: {stats['active_targets']}"""
            
            if stats.get('uptime_seconds'):
                uptime = int(stats['uptime_seconds'])
                perf_text += f"\n‚è∞ Temps de fonctionnement: {uptime}s"
            
            self.performance_text.delete("1.0", tk.END)
            self.performance_text.insert("1.0", perf_text)
            
            # Mettre √† jour le footer
            detections = stats['total_detections']
            avg_time = stats['average_processing_time']
            self.footer_stats.configure(
                text=f"üìä Actif | üéØ {detections} d√©tections | ‚è±Ô∏è {avg_time:.1f}ms | üíæ {stats.get('memory_usage', 0)}MB"
            )
            
        except Exception as e:
            self.log_message(f"‚ùå Erreur refresh performance: {e}")
    
    def on_closing(self):
        """Gestionnaire de fermeture"""
        if self.is_running:
            if messagebox.askyesno("Confirmation", 
                                 "Le syst√®me est actif. Voulez-vous vraiment quitter ?"):
                if self.multi_stream:
                    self.multi_stream.stop_stream()
                self.save_config()
                self.root.destroy()
        else:
            self.save_config()
            self.root.destroy()
    
    def run(self):
        """Lance l'application"""
        # D√©marrer le thread de mise √† jour p√©riodique
        self.start_periodic_updates()
        self.root.mainloop()
    
    def start_periodic_updates(self):
        """D√©marre les mises √† jour p√©riodiques"""
        def update_loop():
            if self.is_running:
                self.refresh_performance_stats()
                self.refresh_targets_list()
            
            # Programmer la prochaine mise √† jour
            self.root.after(2000, update_loop)  # Toutes les 2 secondes
        
        # D√©marrer la boucle de mise √† jour
        self.root.after(1000, update_loop)

# Point d'entr√©e
if __name__ == "__main__":
    try:
        app = UltimateInterface()
        app.run()
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
