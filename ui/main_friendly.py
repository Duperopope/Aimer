# -*- coding: utf-8 -*-
"""
Syst√®me de Vis√©e Intelligent - Interface avec Logging Complet
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import sys
import os
import time
import logging
from datetime import datetime
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('system.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Ajouter le r√©pertoire parent au path
parent_dir = Path(__file__).parent.parent
sys.path.insert(0, str(parent_dir))

# Configuration pour √©viter les erreurs d'importation
try:
    import cv2
    import numpy as np
    from ultralytics import YOLO
    import pyautogui
    from PIL import Image, ImageTk
    IMPORTS_OK = True
    logger.info("‚úÖ Tous les modules import√©s avec succ√®s")
except ImportError as e:
    IMPORTS_OK = False
    IMPORT_ERROR = str(e)
    logger.error(f"‚ùå Erreur d'importation: {e}")

class UserFriendlyAimingSystem:
    def __init__(self):
        logger.info("üöÄ Initialisation du syst√®me de vis√©e")
        
        # Variables d'√©tat
        self.is_running = False
        self.detection_thread = None
        self.model = None
        self.total_detections = 0
        self.start_time = None
        
        # Configuration des couleurs
        self.colors = {
            'primary': '#007bff',
            'success': '#28a745',
            'warning': '#ffc107', 
            'danger': '#dc3545',
            'info': '#17a2b8',
            'light': '#f8f9fa',
            'dark': '#343a40'
        }
        
        # Interface principale
        self.root = tk.Tk()
        self.setup_main_window()
        self.create_interface()
        
        # Initialisation diff√©r√©e
        self.root.after(100, self.delayed_init)
        
        logger.info("‚úÖ Interface initialis√©e")
    
    def setup_main_window(self):
        """Configure la fen√™tre principale"""
        self.root.title("üéØ Syst√®me de Vis√©e Intelligent - Version Debug")
        self.root.geometry("1000x800")
        self.root.configure(bg='#f8f9fa')
        
        # Centrer la fen√™tre
        self.center_window()
        
        # Gestionnaire de fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        logger.info("üñ•Ô∏è Fen√™tre principale configur√©e")
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
        logger.info(f"üñ•Ô∏è Fen√™tre centr√©e: {width}x{height} √† position ({x}, {y})")
    
    def create_interface(self):
        """Cr√©e l'interface utilisateur optimis√©e"""
        logger.info("üé® Cr√©ation de l'interface...")
        
        # Container principal SANS scrollbar pour √©viter les probl√®mes
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Sections organis√©es verticalement
        self.create_header(main_frame)
        self.create_control_panel(main_frame)
        self.create_status_display(main_frame)
        self.create_results_display(main_frame)
        
        logger.info("‚úÖ Interface cr√©√©e avec succ√®s")
    
    def create_header(self, parent):
        """Cr√©e l'en-t√™te compact"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Titre principal
        title_label = ttk.Label(header_frame, text="üéØ Syst√®me de Vis√©e Intelligent", 
                               font=('Arial', 18, 'bold'))
        title_label.pack()
        
        subtitle_label = ttk.Label(header_frame, text="Version Debug avec Logging Complet", 
                                  font=('Arial', 10))
        subtitle_label.pack()
        
        logger.info("üìã En-t√™te cr√©√©")
    
    def create_control_panel(self, parent):
        """Cr√©e le panneau de contr√¥le principal"""
        control_frame = ttk.LabelFrame(parent, text="üéÆ Contr√¥les Principaux", padding="10")
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Ligne 1: Boutons d'action
        action_frame = ttk.Frame(control_frame)
        action_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.main_start_btn = tk.Button(action_frame, 
                                       text="üéØ D√âMARRER LA D√âTECTION", 
                                       font=('Arial', 12, 'bold'),
                                       bg=self.colors['success'], 
                                       fg='white',
                                       height=2,
                                       command=self.toggle_detection)
        self.main_start_btn.pack(side=tk.LEFT, padx=(0, 10), fill=tk.X, expand=True)
        
        self.test_btn = tk.Button(action_frame, 
                                 text="üß™ TEST YOLO", 
                                 font=('Arial', 11),
                                 bg=self.colors['info'], 
                                 fg='white',
                                 height=2,
                                 command=self.test_yolo)
        self.test_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.log_btn = tk.Button(action_frame, 
                                text="üìã VOIR LOGS", 
                                font=('Arial', 11),
                                bg=self.colors['warning'], 
                                fg='white',
                                height=2,
                                command=self.show_logs)
        self.log_btn.pack(side=tk.LEFT)
        
        # Ligne 2: Param√®tres
        settings_frame = ttk.Frame(control_frame)
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Type de d√©tection
        ttk.Label(settings_frame, text="Type de d√©tection:", font=('Arial', 10)).pack(side=tk.LEFT)
        
        self.detection_type = tk.StringVar(value="Objets g√©n√©raux")
        type_combo = ttk.Combobox(settings_frame, textvariable=self.detection_type, 
                                 values=["Objets g√©n√©raux", "Personnes", "V√©hicules", "Objets quotidiens"],
                                 state="readonly", width=20)
        type_combo.pack(side=tk.LEFT, padx=(10, 20))
        
        # Niveau de confiance
        ttk.Label(settings_frame, text="Confiance:", font=('Arial', 10)).pack(side=tk.LEFT)
        
        self.confidence_var = tk.DoubleVar(value=0.5)
        confidence_scale = ttk.Scale(settings_frame, from_=0.1, to=0.9, 
                                    variable=self.confidence_var, orient='horizontal',
                                    length=200)
        confidence_scale.pack(side=tk.LEFT, padx=(10, 10))
        
        self.confidence_label = ttk.Label(settings_frame, text="50%", font=('Arial', 10))
        self.confidence_label.pack(side=tk.LEFT)
        
        self.confidence_var.trace('w', self.update_confidence_display)
        
        logger.info("üéÆ Panneau de contr√¥le cr√©√©")
    
    def create_status_display(self, parent):
        """Cr√©e l'affichage de statut compact"""
        status_frame = ttk.LabelFrame(parent, text="üìä Statut en Temps R√©el", padding="10")
        status_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Statut principal
        self.status_text = tk.StringVar(value="üî¥ Syst√®me arr√™t√© - En attente")
        self.status_label = ttk.Label(status_frame, textvariable=self.status_text, 
                                     font=('Arial', 12, 'bold'))
        self.status_label.pack(pady=(0, 5))
        
        # M√©triques en ligne
        metrics_frame = ttk.Frame(status_frame)
        metrics_frame.pack(fill=tk.X)
        
        # D√©tections
        ttk.Label(metrics_frame, text="D√©tections:", font=('Arial', 10)).pack(side=tk.LEFT)
        self.detections_count = tk.StringVar(value="0")
        ttk.Label(metrics_frame, textvariable=self.detections_count, 
                 font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=(5, 20))
        
        # Temps actif
        ttk.Label(metrics_frame, text="Temps:", font=('Arial', 10)).pack(side=tk.LEFT)
        self.active_time = tk.StringVar(value="00:00")
        ttk.Label(metrics_frame, textvariable=self.active_time, 
                 font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=(5, 20))
        
        # Statut mod√®le
        ttk.Label(metrics_frame, text="Mod√®le:", font=('Arial', 10)).pack(side=tk.LEFT)
        self.model_status = tk.StringVar(value="‚è≥ Chargement...")
        ttk.Label(metrics_frame, textvariable=self.model_status, 
                 font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=(5, 0))
        
        logger.info("üìä Affichage de statut cr√©√©")
    
    def create_results_display(self, parent):
        """Cr√©e l'affichage des r√©sultats optimis√©"""
        results_frame = ttk.LabelFrame(parent, text="üìã Journal des D√©tections", padding="10")
        results_frame.pack(fill=tk.BOTH, expand=True)
        
        # Zone de texte avec scrollbar
        text_frame = ttk.Frame(results_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        self.results_text = tk.Text(text_frame, height=15, width=100, 
                                   bg='#ffffff', font=('Consolas', 9),
                                   wrap=tk.WORD)
        
        results_scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, 
                                         command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=results_scrollbar.set)
        
        self.results_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        results_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Boutons d'action
        action_frame = ttk.Frame(results_frame)
        action_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(action_frame, text="üíæ Sauvegarder", 
                  command=self.save_results).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üóëÔ∏è Effacer", 
                  command=self.clear_results).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üì§ Exporter Log", 
                  command=self.export_log).pack(side=tk.LEFT, padx=(0, 5))
        
        # Message initial
        self.log_message("üöÄ Syst√®me de vis√©e initialis√© - Pr√™t √† d√©marrer")
        self.log_message("üìã Cliquez sur 'D√âMARRER LA D√âTECTION' pour commencer")
        
        logger.info("üìã Zone de r√©sultats cr√©√©e")
    
    def delayed_init(self):
        """Initialisation diff√©r√©e avec logging d√©taill√©"""
        logger.info("üîÑ D√©but de l'initialisation diff√©r√©e")
        
        if not IMPORTS_OK:
            self.log_message("‚ùå ERREUR: Modules manquants!")
            self.log_message(f"D√©tails: {IMPORT_ERROR}")
            self.model_status.set("‚ùå Erreur")
            self.show_import_error()
            return
        
        try:
            self.log_message("üîÑ Chargement du mod√®le YOLO...")
            self.model_status.set("‚è≥ Chargement...")
            
            # Chargement du mod√®le avec timeout
            self.model = YOLO('yolov8n.pt')
            
            self.log_message("‚úÖ Mod√®le YOLO charg√© avec succ√®s!")
            self.log_message(f"üìä Classes disponibles: {len(self.model.names)}")
            
            # Afficher quelques classes disponibles
            sample_classes = list(self.model.names.values())[:10]
            self.log_message(f"üéØ Exemples de classes: {', '.join(sample_classes)}")
            
            self.status_text.set("‚úÖ Syst√®me pr√™t - Cliquez sur 'D√âMARRER'")
            self.model_status.set("‚úÖ Charg√©")
            
            logger.info("‚úÖ Initialisation termin√©e avec succ√®s")
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du chargement du mod√®le: {e}"
            self.log_message(error_msg)
            self.status_text.set("‚ùå Erreur d'initialisation")
            self.model_status.set("‚ùå Erreur")
            logger.error(error_msg)
    
    # === M√âTHODES DE CONTR√îLE ===
    
    def toggle_detection(self):
        """Active/d√©sactive la d√©tection avec logging"""
        if not self.is_running:
            self.start_detection()
        else:
            self.stop_detection()
    
    def start_detection(self):
        """D√©marre la d√©tection avec logging d√©taill√©"""
        if not self.model:
            error_msg = "‚ùå Impossible de d√©marrer: Mod√®le YOLO non charg√©"
            self.log_message(error_msg)
            messagebox.showerror("Erreur", error_msg)
            logger.error(error_msg)
            return
        
        self.log_message("üöÄ D√©marrage de la d√©tection...")
        logger.info("üöÄ D√©marrage de la d√©tection")
        
        self.is_running = True
        self.start_time = time.time()
        self.main_start_btn.configure(text="‚èπÔ∏è ARR√äTER LA D√âTECTION", bg=self.colors['danger'])
        self.status_text.set("üü¢ D√©tection ACTIVE - Surveillance en cours")
        
        # D√©marrer le thread de d√©tection
        self.detection_thread = threading.Thread(target=self.detection_loop)
        self.detection_thread.daemon = True
        self.detection_thread.start()
        
        # D√©marrer le timer
        self.update_timer()
        
        self.log_message("‚úÖ D√©tection d√©marr√©e avec succ√®s!")
        self.log_message(f"‚öôÔ∏è Seuil de confiance: {self.confidence_var.get():.1f}")
        self.log_message(f"üéØ Type de d√©tection: {self.detection_type.get()}")
    
    def stop_detection(self):
        """Arr√™te la d√©tection avec logging"""
        self.log_message("‚èπÔ∏è Arr√™t de la d√©tection...")
        logger.info("‚èπÔ∏è Arr√™t de la d√©tection")
        
        self.is_running = False
        self.main_start_btn.configure(text="üéØ D√âMARRER LA D√âTECTION", bg=self.colors['success'])
        self.status_text.set("üî¥ D√©tection ARR√äT√âE - Pr√™t √† red√©marrer")
        
        # Statistiques finales
        if self.start_time:
            duration = time.time() - self.start_time
            self.log_message(f"üìä Session termin√©e: {duration:.1f}s, {self.total_detections} d√©tections")
        
        self.log_message("‚úÖ D√©tection arr√™t√©e")
    
    def detection_loop(self):
        """Boucle de d√©tection avec logging d√©taill√©"""
        logger.info("üîÑ Boucle de d√©tection d√©marr√©e")
        detection_count = 0
        
        while self.is_running:
            try:
                # Capture d'√©cran
                screenshot = pyautogui.screenshot()
                screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
                
                # D√©tection YOLO
                results = self.model(screenshot, conf=self.confidence_var.get(), verbose=False)
                
                detections = []
                for result in results:
                    boxes = result.boxes
                    if boxes is not None:
                        for box in boxes:
                            class_id = int(box.cls[0])
                            class_name = self.model.names[class_id]
                            confidence = float(box.conf[0])
                            
                            detections.append({
                                'class_name': class_name,
                                'confidence': confidence,
                                'bbox': box.xyxy[0].tolist()
                            })
                
                if detections:
                    detection_count += 1
                    self.total_detections += len(detections)
                    self.update_detection_display(detections)
                    
                    # Log d√©taill√© toutes les 10 d√©tections
                    if detection_count % 10 == 0:
                        logger.info(f"üìä {detection_count} cycles de d√©tection, {self.total_detections} objets trouv√©s")
                
                time.sleep(0.2)  # 5 FPS
                
            except Exception as e:
                if self.is_running:
                    error_msg = f"‚ùå Erreur dans la boucle de d√©tection: {e}"
                    self.log_message(error_msg)
                    logger.error(error_msg)
                time.sleep(1)
        
        logger.info("üîÑ Boucle de d√©tection termin√©e")
    
    def test_yolo(self):
        """Test complet du syst√®me YOLO"""
        self.log_message("üß™ === TEST YOLO D√âTAILL√â ===")
        logger.info("üß™ Test YOLO d√©marr√©")
        
        if not self.model:
            self.log_message("‚ùå Test √©chou√©: Mod√®le non charg√©")
            return
        
        try:
            # Test 1: Informations du mod√®le
            self.log_message(f"üìä Mod√®le: {self.model.model}")
            self.log_message(f"üìä Classes disponibles: {len(self.model.names)}")
            
            # Test 2: Capture d'√©cran
            self.log_message("üì∑ Test de capture d'√©cran...")
            screenshot = pyautogui.screenshot()
            screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            self.log_message(f"‚úÖ Capture r√©ussie: {screenshot.shape}")
            
            # Test 3: D√©tection
            self.log_message("üéØ Test de d√©tection...")
            results = self.model(screenshot, conf=0.3, verbose=False)
            
            detection_count = 0
            for result in results:
                if result.boxes is not None:
                    detection_count += len(result.boxes)
            
            self.log_message(f"üéØ D√©tections trouv√©es: {detection_count}")
            
            # Test 4: Performance
            start_time = time.time()
            for _ in range(3):
                self.model(screenshot, conf=0.5, verbose=False)
            avg_time = (time.time() - start_time) / 3
            
            self.log_message(f"‚ö° Performance: {avg_time:.2f}s par d√©tection")
            
            # R√©sultat final
            self.log_message("‚úÖ === TEST YOLO R√âUSSI ===")
            messagebox.showinfo("Test YOLO", 
                              f"‚úÖ Test r√©ussi!\n\n"
                              f"‚Ä¢ Mod√®le: Charg√©\n"
                              f"‚Ä¢ Capture: OK\n"
                              f"‚Ä¢ D√©tections: {detection_count}\n"
                              f"‚Ä¢ Performance: {avg_time:.2f}s")
            
            logger.info("‚úÖ Test YOLO r√©ussi")
            
        except Exception as e:
            error_msg = f"‚ùå Test √©chou√©: {e}"
            self.log_message(error_msg)
            messagebox.showerror("Test YOLO", error_msg)
            logger.error(error_msg)
    
    # === M√âTHODES D'INTERFACE ===
    
    def update_confidence_display(self, *args):
        """Met √† jour l'affichage de confiance"""
        value = self.confidence_var.get()
        percentage = int(value * 100)
        self.confidence_label.configure(text=f"{percentage}%")
    
    def update_detection_display(self, detections):
        """Met √† jour l'affichage des d√©tections"""
        def update_ui():
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            # R√©sum√© des d√©tections
            summary = {}
            for detection in detections:
                class_name = detection['class_name']
                if class_name in summary:
                    summary[class_name] += 1
                else:
                    summary[class_name] = 1
            
            # Affichage group√©
            self.results_text.insert(tk.END, f"[{timestamp}] üîç {len(detections)} d√©tections:\n")
            
            for class_name, count in summary.items():
                if count > 1:
                    self.results_text.insert(tk.END, f"  ‚Ä¢ {class_name}: {count}x\n")
                else:
                    confidence = next(d['confidence'] for d in detections if d['class_name'] == class_name)
                    self.results_text.insert(tk.END, f"  ‚Ä¢ {class_name}: {confidence:.2f}\n")
            
            self.results_text.insert(tk.END, "\n")
            self.results_text.see(tk.END)
            
            # Mettre √† jour les m√©triques
            self.detections_count.set(str(self.total_detections))
        
        self.root.after(0, update_ui)
    
    def update_timer(self):
        """Met √† jour le timer"""
        if self.is_running and self.start_time:
            elapsed = int(time.time() - self.start_time)
            minutes, seconds = divmod(elapsed, 60)
            self.active_time.set(f"{minutes:02d}:{seconds:02d}")
            self.root.after(1000, self.update_timer)
        else:
            self.active_time.set("00:00")
    
    def log_message(self, message):
        """Ajoute un message au log avec timestamp"""
        def update_ui():
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.results_text.insert(tk.END, f"[{timestamp}] {message}\n")
            self.results_text.see(tk.END)
            
            # Limiter le nombre de lignes
            lines = self.results_text.get("1.0", tk.END).count('\n')
            if lines > 500:
                self.results_text.delete("1.0", "50.0")
        
        self.root.after(0, update_ui)
    
    # === M√âTHODES DE FICHIERS ===
    
    def save_results(self):
        """Sauvegarde les r√©sultats avec m√©tadonn√©es"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Fichiers texte", "*.txt")],
                title="Sauvegarder les r√©sultats"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("=== SYST√àME DE VIS√âE INTELLIGENT ===\n")
                    f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"Total d√©tections: {self.total_detections}\n")
                    f.write(f"Seuil de confiance: {self.confidence_var.get():.2f}\n")
                    f.write(f"Type de d√©tection: {self.detection_type.get()}\n")
                    f.write("=" * 50 + "\n\n")
                    f.write(self.results_text.get("1.0", tk.END))
                
                self.log_message(f"üíæ R√©sultats sauvegard√©s: {filename}")
                messagebox.showinfo("Sauvegarde", "‚úÖ R√©sultats sauvegard√©s!")
                
        except Exception as e:
            error_msg = f"‚ùå Erreur de sauvegarde: {e}"
            self.log_message(error_msg)
            messagebox.showerror("Erreur", error_msg)
    
    def clear_results(self):
        """Efface les r√©sultats"""
        if messagebox.askyesno("Confirmation", "Effacer tous les r√©sultats ?"):
            self.results_text.delete("1.0", tk.END)
            self.log_message("üóëÔ∏è R√©sultats effac√©s")
            self.log_message("üöÄ Syst√®me pr√™t pour une nouvelle session")
    
    def export_log(self):
        """Exporte le log syst√®me"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".log",
                filetypes=[("Fichiers log", "*.log"), ("Fichiers texte", "*.txt")],
                title="Exporter le log syst√®me"
            )
            
            if filename:
                # Copier le fichier de log
                with open('system.log', 'r', encoding='utf-8') as src:
                    with open(filename, 'w', encoding='utf-8') as dst:
                        dst.write(src.read())
                
                self.log_message(f"üì§ Log export√©: {filename}")
                messagebox.showinfo("Export", "‚úÖ Log export√©!")
                
        except Exception as e:
            error_msg = f"‚ùå Erreur d'export: {e}"
            self.log_message(error_msg)
            messagebox.showerror("Erreur", error_msg)
    
    def show_logs(self):
        """Affiche les logs syst√®me dans une fen√™tre"""
        try:
            log_window = tk.Toplevel(self.root)
            log_window.title("üìã Logs Syst√®me")
            log_window.geometry("800x600")
            
            log_text = tk.Text(log_window, wrap=tk.WORD, font=('Consolas', 9))
            log_scrollbar = ttk.Scrollbar(log_window, orient=tk.VERTICAL, command=log_text.yview)
            log_text.configure(yscrollcommand=log_scrollbar.set)
            
            # Charger le fichier de log
            if os.path.exists('system.log'):
                with open('system.log', 'r', encoding='utf-8') as f:
                    log_text.insert("1.0", f.read())
            else:
                log_text.insert("1.0", "Aucun fichier de log trouv√©.")
            
            log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # Bouton pour actualiser
            refresh_btn = ttk.Button(log_window, text="üîÑ Actualiser", 
                                    command=lambda: self.refresh_logs(log_text))
            refresh_btn.pack(pady=5)
            
        except Exception as e:
            messagebox.showerror("Erreur", f"‚ùå Impossible d'afficher les logs: {e}")
    
    def refresh_logs(self, log_text):
        """Actualise les logs affich√©s"""
        try:
            log_text.delete("1.0", tk.END)
            if os.path.exists('system.log'):
                with open('system.log', 'r', encoding='utf-8') as f:
                    log_text.insert("1.0", f.read())
            log_text.see(tk.END)
        except Exception as e:
            log_text.insert(tk.END, f"\nErreur lors de l'actualisation: {e}")
    
    # === M√âTHODES D'AIDE ===
    
    def show_import_error(self):
        """Affiche l'erreur d'importation avec solution"""
        error_window = tk.Toplevel(self.root)
        error_window.title("‚ùå Erreur d'Installation")
        error_window.geometry("600x400")
        
        frame = ttk.Frame(error_window, padding=20)
        frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(frame, text="‚ùå D√©pendances Manquantes", 
                 font=('Arial', 16, 'bold')).pack(pady=10)
        
        error_text = f"""
Une ou plusieurs d√©pendances sont manquantes:

{IMPORT_ERROR}

Pour r√©soudre ce probl√®me:

1. Ouvrez un terminal/PowerShell
2. Activez votre environnement virtuel:
   .venv\\Scripts\\Activate.ps1
3. Installez les d√©pendances:
   pip install ultralytics opencv-python pillow numpy pyautogui

4. Red√©marrez l'application
"""
        
        ttk.Label(frame, text=error_text, justify='left').pack(pady=10)
        
        button_frame = ttk.Frame(frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="üìã Copier la commande", 
                  command=lambda: self.copy_to_clipboard("pip install ultralytics opencv-python pillow numpy pyautogui")).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå Fermer", 
                  command=error_window.destroy).pack(side=tk.LEFT, padx=5)
    
    def copy_to_clipboard(self, text):
        """Copie du texte dans le presse-papiers"""
        try:
            self.root.clipboard_clear()
            self.root.clipboard_append(text)
            messagebox.showinfo("Copi√©", "‚úÖ Commande copi√©e dans le presse-papiers!")
        except Exception as e:
            messagebox.showerror("Erreur", f"‚ùå Erreur de copie: {e}")
    
    def on_closing(self):
        """Gestionnaire de fermeture avec confirmation"""
        if self.is_running:
            if messagebox.askyesno("Confirmation", 
                                 "üîÑ La d√©tection est encore active.\n"
                                 "Voulez-vous vraiment quitter?"):
                self.log_message("üîÑ Fermeture forc√©e - D√©tection interrompue")
                self.is_running = False
                logger.info("üîÑ Application ferm√©e par l'utilisateur (d√©tection active)")
                self.root.destroy()
        else:
            self.log_message("üëã Fermeture normale de l'application")
            logger.info("üëã Application ferm√©e normalement")
            self.root.destroy()
    
    def run(self):
        """Lance l'application avec gestion d'erreurs"""
        try:
            logger.info("üéØ D√©marrage de l'application principale")
            self.root.mainloop()
        except Exception as e:
            error_msg = f"‚ùå Erreur fatale dans l'application: {e}"
            logger.error(error_msg)
            messagebox.showerror("Erreur Fatale", error_msg)
        finally:
            logger.info("üîÑ Nettoyage final de l'application")

# Point d'entr√©e principal
if __name__ == "__main__":
    try:
        logger.info("=" * 60)
        logger.info("üöÄ D√âMARRAGE DU SYST√àME DE VIS√âE INTELLIGENT")
        logger.info("=" * 60)
        
        app = UserFriendlyAimingSystem()
        app.run()
        
        logger.info("üëã Application termin√©e normalement")
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è Application interrompue par l'utilisateur (Ctrl+C)")
        print("\nüëã Application ferm√©e par l'utilisateur")
        
    except Exception as e:
        error_msg = f"‚ùå Erreur fatale au d√©marrage: {e}"
        logger.error(error_msg)
        print(error_msg)
        import traceback
        traceback.print_exc()
        
    finally:
        logger.info("üîÑ Nettoyage termin√©")
