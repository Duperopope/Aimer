#!/usr/bin/env python3
"""
üîß AIMER Auto-Fix Advanced
Outil automatique avanc√© pour r√©parer les erreurs courantes du projet AIMER
Sp√©cialement con√ßu pour corriger les erreurs YAML et Python
"""

import json
import os
import shutil
import subprocess
import sys
import traceback
from pathlib import Path

# Import conditionnel de rich
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.progress import Progress

    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

    class Console:
        def print(self, *args, **kwargs):
            print(*args)


console = Console()


console = Console()


class AimerAutoFixAdvanced:
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.errors_fixed = 0
        self.warnings = 0

    def log_success(self, message):
        if RICH_AVAILABLE:
            console.print(f"‚úÖ {message}", style="green")
        else:
            print(f"‚úÖ {message}")
        self.errors_fixed += 1

    def log_warning(self, message):
        if RICH_AVAILABLE:
            console.print(f"‚ö†Ô∏è {message}", style="yellow")
        else:
            print(f"‚ö†Ô∏è {message}")
        self.warnings += 1

    def log_error(self, message):
        if RICH_AVAILABLE:
            console.print(f"‚ùå {message}", style="red")
        else:
            print(f"‚ùå {message}")

    def log_info(self, message):
        if RICH_AVAILABLE:
            console.print(f"‚ÑπÔ∏è {message}", style="blue")
        else:
            print(f"‚ÑπÔ∏è {message}")

    def install_missing_packages(self):
        """Installe les packages Python manquants"""
        print("\nüì¶ Installation des d√©pendances...")

        # Liste des packages requis
        packages = [
            "cryptography>=41.0.0",
            "rich>=13.0.0",
            "psutil>=5.9.0",
            "pyperclip>=1.8.0",
            "click>=8.0.0",
            "python-dotenv>=1.0.0",
            "pydantic>=2.0.0",
            "pytest>=7.0.0",
            "pytest-cov>=4.0.0",
        ]

        try:
            # Mettre √† jour pip
            subprocess.run(
                [sys.executable, "-m", "pip", "install", "--upgrade", "pip"],
                check=True,
                capture_output=True,
            )

            # Installer chaque package
            for package in packages:
                package_name = package.split(">=")[0]
                try:
                    subprocess.run(
                        [sys.executable, "-m", "pip", "install", package],
                        check=True,
                        capture_output=True,
                    )
                    self.log_success(f"Package {package_name} install√©")
                except subprocess.CalledProcessError:
                    self.log_warning(f"√âchec installation {package_name}")

            return True

        except Exception as e:
            self.log_error(f"Erreur lors de l'installation: {e}")
            return False

    def fix_yaml_deploy(self):
        """Corrige sp√©cifiquement le fichier deploy.yml"""
        deploy_file = self.base_path / ".github" / "workflows" / "deploy.yml"

        if not deploy_file.exists():
            self.log_warning("deploy.yml non trouv√©")
            return False

        try:
            content = deploy_file.read_text(encoding="utf-8")
            original_content = content

            # Correction de l'action obsol√®te create-release
            if "actions/create-release@v1" in content:
                content = content.replace(
                    "uses: actions/create-release@v1",
                    "uses: softprops/action-gh-release@v1",
                )
                content = content.replace(
                    "release_name: AIMER ${{ github.ref_name }}",
                    "name: AIMER ${{ github.ref_name }}",
                )
                content = content.replace(
                    "tag_name: ${{ github.ref }}", "tag_name: ${{ github.ref_name }}"
                )

                # √âcrire le fichier corrig√©
                deploy_file.write_text(content, encoding="utf-8")
                self.log_success("deploy.yml corrig√© (action obsol√®te)")
                return True
            else:
                self.log_info("deploy.yml d√©j√† correct")
                return True

        except Exception as e:
            self.log_error(f"Erreur correction deploy.yml: {e}")
            return False

    def fix_yaml_workflows(self):
        """Corrige les erreurs dans tous les workflows YAML"""
        print("\nüìù Correction des workflows YAML...")

        workflows_dir = self.base_path / ".github" / "workflows"
        if not workflows_dir.exists():
            self.log_warning("Dossier .github/workflows manquant")
            return False

        # Corriger deploy.yml en premier
        self.fix_yaml_deploy()

        # Corrections pour tous les fichiers YAML
        yaml_files = list(workflows_dir.glob("*.yml"))

        for yaml_file in yaml_files:
            try:
                content = yaml_file.read_text(encoding="utf-8")
                original_content = content

                # Corrections communes pour toutes les actions
                replacements = {
                    "actions/checkout@v3": "actions/checkout@v4",
                    "actions/setup-python@v3": "actions/setup-python@v4",
                    "actions/upload-pages-artifact@v1": "actions/upload-pages-artifact@v2",
                    "actions/configure-pages@v2": "actions/configure-pages@v3",
                    "actions/deploy-pages@v1": "actions/deploy-pages@v2",
                }

                for old, new in replacements.items():
                    if old in content:
                        content = content.replace(old, new)

                # Sauvegarder si des changements ont √©t√© faits
                if content != original_content:
                    yaml_file.write_text(content, encoding="utf-8")
                    self.log_success(f"{yaml_file.name} mis √† jour")
                else:
                    self.log_info(f"{yaml_file.name} d√©j√† √† jour")

            except Exception as e:
                self.log_error(f"Erreur dans {yaml_file.name}: {e}")

        return True

    def fix_python_syntax(self):
        """V√©rifie et tente de corriger la syntaxe Python"""
        print("\nüêç V√©rification de la syntaxe Python...")

        python_files = list(self.base_path.glob("*.py"))
        errors_found = 0

        for py_file in python_files:
            try:
                with open(py_file, "r", encoding="utf-8") as f:
                    content = f.read()

                # Tenter de compiler
                compile(content, str(py_file), "exec")
                self.log_success(f"{py_file.name} syntaxe OK")

            except SyntaxError as e:
                self.log_error(f"Erreur syntaxe dans {py_file.name} ligne {e.lineno}: {e.msg}")
                errors_found += 1

                # Tentative de correction automatique pour erreurs courantes
                try:
                    fixed_content = self.auto_fix_python_syntax(content, e)
                    if fixed_content != content:
                        # Cr√©er une sauvegarde
                        backup_file = py_file.with_suffix(".py.backup")
                        shutil.copy2(py_file, backup_file)

                        # √âcrire le fichier corrig√©
                        with open(py_file, "w", encoding="utf-8") as f:
                            f.write(fixed_content)

                        self.log_success(f"{py_file.name} corrig√© automatiquement")
                        errors_found -= 1  # Erreur corrig√©e

                except Exception:
                    pass  # Correction automatique √©chou√©e

            except Exception as e:
                self.log_warning(f"Impossible de v√©rifier {py_file.name}: {e}")

        return errors_found == 0

    def auto_fix_python_syntax(self, content, syntax_error):
        """Tente de corriger automatiquement certaines erreurs Python"""
        lines = content.split("\n")
        error_line = syntax_error.lineno - 1  # Index 0-based

        if error_line < len(lines):
            line = lines[error_line]

            # Corrections courantes
            fixes = [
                # Parenth√®ses manquantes
                (r"print (.+)", r"print(\1)"),
                # Deux-points manquants
                (
                    r"^(\s*)(if|for|while|def|class|try|except|finally|with|elif|else)\s+(.+)(?<!:)$",
                    r"\1\2 \3:",
                ),
                # Indentation mixte (remplacer tabs par espaces)
                (r"\t", "    "),
            ]

            import re

            fixed_line = line
            for pattern, replacement in fixes:
                fixed_line = re.sub(pattern, replacement, fixed_line)

            if fixed_line != line:
                lines[error_line] = fixed_line
                return "\n".join(lines)

        return content  # Aucune correction appliqu√©e

    def setup_vscode_complete(self):
        """Configuration compl√®te de VS Code"""
        print("\nüîß Configuration compl√®te de VS Code...")

        vscode_dir = self.base_path / ".vscode"
        vscode_dir.mkdir(exist_ok=True)

        # Extensions recommand√©es
        extensions = {
            "recommendations": [
                "ms-python.python",
                "ms-python.flake8",
                "ms-python.black-formatter",
                "ms-python.pylint",
                "ms-python.isort",
                "redhat.vscode-yaml",
                "github.vscode-github-actions",
                "ms-vscode.powershell",
                "streetsidesoftware.code-spell-checker",
                "ms-vscode.vscode-json",
                "ms-python.autopep8",
            ]
        }

        # Param√®tres optimis√©s
        settings = {
            "python.defaultInterpreterPath": "python",
            "python.linting.enabled": True,
            "python.linting.flake8Enabled": True,
            "python.linting.pylintEnabled": False,
            "python.formatting.provider": "black",
            "python.analysis.typeCheckingMode": "basic",
            "yaml.validate": True,
            "yaml.hover": True,
            "yaml.completion": True,
            "files.autoSave": "afterDelay",
            "files.autoSaveDelay": 1000,
            "editor.formatOnSave": True,
            "editor.formatOnPaste": True,
            "git.autofetch": True,
            "git.enableSmartCommit": True,
            "terminal.integrated.defaultProfile.windows": "PowerShell",
            "files.associations": {"*.yml": "yaml", "*.yaml": "yaml"},
            "workbench.colorTheme": "Default Dark+",
            "editor.minimap.enabled": True,
            "editor.wordWrap": "on",
        }

        # T√¢ches pour automatiser les op√©rations courantes
        tasks = {
            "version": "2.0.0",
            "tasks": [
                {
                    "label": "AIMER: Auto-Fix",
                    "type": "shell",
                    "command": "python",
                    "args": ["auto_fix_advanced.py"],
                    "group": "build",
                    "presentation": {
                        "echo": True,
                        "reveal": "always",
                        "focus": False,
                        "panel": "shared",
                    },
                },
                {
                    "label": "AIMER: Install Dependencies",
                    "type": "shell",
                    "command": "pip",
                    "args": ["install", "-r", "requirements_security.txt"],
                    "group": "build",
                },
                {
                    "label": "AIMER: Run Tests",
                    "type": "shell",
                    "command": "python",
                    "args": ["-m", "pytest", "-v"],
                    "group": "test",
                },
            ],
        }

        try:
            # Sauvegarder tous les fichiers
            with open(vscode_dir / "extensions.json", "w", encoding="utf-8") as f:
                json.dump(extensions, f, indent=2)

            with open(vscode_dir / "settings.json", "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2)

            with open(vscode_dir / "tasks.json", "w", encoding="utf-8") as f:
                json.dump(tasks, f, indent=2)

            self.log_success("Configuration VS Code compl√®te cr√©√©e")
            return True

        except Exception as e:
            self.log_error(f"Erreur configuration VS Code: {e}")
            return False

    def cleanup_project(self):
        """Nettoie les fichiers temporaires et probl√©matiques"""
        print("\nüßπ Nettoyage du projet...")

        cleaned = 0

        # Patterns de fichiers √† nettoyer
        cleanup_patterns = [
            "**/*.pyc",
            "**/__pycache__",
            "**/*.log",
            "**/.pytest_cache",
            "**/*.tmp",
            "**/*.bak",
        ]

        for pattern in cleanup_patterns:
            for item in self.base_path.rglob(pattern.replace("**", "*")):
                try:
                    if item.is_file():
                        item.unlink()
                        cleaned += 1
                    elif item.is_dir():
                        shutil.rmtree(item)
                        cleaned += 1
                except Exception:
                    pass

        if cleaned > 0:
            self.log_success(f"{cleaned} √©l√©ments temporaires supprim√©s")
        else:
            self.log_info("Aucun nettoyage n√©cessaire")

        return True

    def generate_final_report(self):
        """G√©n√®re un rapport final d√©taill√©"""
        print("\nüìä G√©n√©ration du rapport final...")

        report_lines = [
            "# üîß AIMER Auto-Fix Advanced - Rapport Final",
            f"üìÖ G√©n√©r√© le: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "## üéØ R√©sultats de la Correction",
            f"- **Erreurs corrig√©es**: {self.errors_fixed}",
            f"- **Avertissements**: {self.warnings}",
            "",
            "## üìã Actions Effectu√©es",
            "- ‚úÖ Installation des d√©pendances Python",
            "- ‚úÖ Correction des workflows YAML",
            "- ‚úÖ V√©rification syntaxe Python",
            "- ‚úÖ Configuration VS Code compl√®te",
            "- ‚úÖ Nettoyage du projet",
            "",
            "## üí° Recommandations Post-Correction",
            "1. **Red√©marrer VS Code** pour appliquer toutes les configurations",
            "2. **Installer les extensions recommand√©es** via VS Code",
            "3. **Tester les workflows GitHub Actions** en faisant un commit",
            "4. **V√©rifier que tous les scripts Python** fonctionnent correctement",
            "",
            "## üöÄ Prochaines √âtapes",
            "- Ex√©cuter `python main.py` pour tester le projet",
            "- Utiliser `git status` pour v√©rifier l'√©tat du repository",
            "- Lancer les scripts de synchronisation si n√©cessaire",
            "",
            "---",
            "ü§ñ Rapport g√©n√©r√© automatiquement par AIMER Auto-Fix Advanced",
        ]

        report_file = self.base_path / "AUTO_FIX_REPORT.md"
        try:
            with open(report_file, "w", encoding="utf-8") as f:
                f.write("\n".join(report_lines))
            self.log_success(f"Rapport sauvegard√©: {report_file.name}")
        except Exception as e:
            self.log_error(f"Erreur sauvegarde rapport: {e}")

        return True

    def run_complete_fix(self):
        """Ex√©cute la correction compl√®te"""
        print("üîß AIMER Auto-Fix Advanced - Correction Compl√®te")
        print("=" * 60)

        fixes = [
            ("üì¶ Installation d√©pendances", self.install_missing_packages),
            ("üìù Correction YAML", self.fix_yaml_workflows),
            ("üêç V√©rification Python", self.fix_python_syntax),
            ("üîß Configuration VS Code", self.setup_vscode_complete),
            ("üßπ Nettoyage projet", self.cleanup_project),
            ("üìä Rapport final", self.generate_final_report),
        ]

        success_count = 0

        for name, fix_func in fixes:
            print(f"\n{name}...")
            try:
                if fix_func():
                    success_count += 1
                    print(f"‚úÖ {name} termin√©")
                else:
                    print(f"‚ö†Ô∏è {name} termin√© avec avertissements")
            except Exception as e:
                print(f"‚ùå Erreur dans {name}: {e}")
                if "--debug" in sys.argv:
                    traceback.print_exc()

        # R√©sum√© final
        print("\n" + "=" * 60)
        if success_count == len(fixes):
            print("üéâ TOUTES LES CORRECTIONS APPLIQU√âES AVEC SUCC√àS!")
        else:
            print(f"‚ö†Ô∏è {success_count}/{len(fixes)} corrections r√©ussies")

        print(f"\nüìä R√©sum√©: {self.errors_fixed} erreurs corrig√©es, {self.warnings} avertissements")
        print("\nüí° IMPORTANT: Red√©marrez VS Code pour appliquer toutes les configurations!")

        return success_count == len(fixes)


def main():
    """Point d'entr√©e principal"""
    try:
        fixer = AimerAutoFixAdvanced()
        success = fixer.run_complete_fix()

        if success:
            print("\nüöÄ Auto-Fix Advanced termin√© avec succ√®s!")
            return 0
        else:
            print("\n‚ö†Ô∏è Auto-Fix Advanced termin√© avec des avertissements")
            return 1

    except KeyboardInterrupt:
        print("\nüõë Auto-Fix interrompu par l'utilisateur")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
