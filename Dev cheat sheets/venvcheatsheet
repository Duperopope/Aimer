## üóÇÔ∏è Cheat-sheet VS Code (Windows 11) ‚Äì Python & environnements virtuels

> **Objectif express** : retrouver, (r√©)activer et utiliser ton venv proprement dans VS Code, puis quelques raccourcis indispensables.

---

### 1. O√π se trouve mon venv ?

| Situation courante                                                | Dossier / script d‚Äôactivation                                                                                                  |
| ----------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |
| venv cr√©√© via `python -m venv venv`                               | `.\venv\Scripts\activate.bat` (Cmd)<br>`.\venv\Scripts\Activate.ps1` (PowerShell)<br>`source venv/Scripts/activate` (Git Bash) |
| venv nomm√© `.venv` √† la racine du projet (conseill√© pour VS Code) | m√™mes scripts, dans `.venv\Scripts\‚Ä¶`                                                                                          |
| Pipenv                                                            | pas de dossier, VS Code d√©tecte `pipenv`; active avec **Python : Select Interpreter**                                          |
| Conda env ‚Äúmyenv‚Äù                                                 | activation : `conda activate myenv`                                                                                            |

---

### 2. S√©lectionner l‚Äôinterpr√©teur Python **dans VS Code**

1. ‚Ü©Ô∏è **Ouvre** le dossier du projet (**File ‚ñ∏ Open Folder‚Ä¶**).
2. **Ctrl + Shift + P** ‚Üí tape `Python: Select Interpreter`.
3. Choisis l‚Äôentr√©e qui pointe vers `‚Ä¶\.venv\Scripts\python.exe` (ou ton env Conda).

> *Pas dans la liste ?*
>
> * Clique **Enter interpreter path** ‚Üí **Find‚Ä¶** ‚Üí navigue jusqu‚Äôau `python.exe` du venv.
> * VS Code cr√©e (ou met √† jour) `.vscode/settings.json` avec :
>
>   ```json
>   {
>     "python.defaultInterpreterPath": "${workspaceFolder}\\.venv\\Scripts\\python.exe"
>   }
>   ```

---

### 3. (R√©)activer le venv dans le terminal int√©gr√©

1. Ouvre **Terminal int√©gr√©** : **Ctrl + \`** (accent grave).
2. V√©rifie la **coquille** (cmd, PowerShell, Git Bash). Change au besoin :

   * **‚ñ∂ Terminal ‚ñ∏ Select Default Profile‚Ä¶**
3. Ex√©cute le script ad√©quat :

```powershell
# PowerShell
.\.venv\Scripts\Activate.ps1
```

```cmd
:: Invite de commandes
\.venv\Scripts\activate.bat
```

```bash
# Git Bash
source .venv/Scripts/activate
```

*Astuce* : ajoute cette ligne dans **settings.json** pour que VS Code active automatiquement le venv √† l‚Äôouverture du terminal :

```json
"terminal.integrated.env.windows": {
    "VIRTUAL_ENV": "${workspaceFolder}\\.venv",
    "PATH": "${workspaceFolder}\\.venv\\Scripts;${env:PATH}"
}
```

---

### 4. Commandes rapides venv

| Action                | Cmd / PowerShell                |
| --------------------- | ------------------------------- |
| Cr√©er un venv `.venv` | `python -m venv .venv`          |
| Activer               | voir ¬ß3                         |
| D√©sactiver            | `deactivate`                    |
| Installer un paquet   | `pip install nom_paquet`        |
| Geler les d√©pendances | `pip freeze > requirements.txt` |

---

### 5. Raccourcis VS Code essentiels (Windows)

| But                               | Raccourci              |
| --------------------------------- | ---------------------- |
| Ouvrir palette de commandes       | **Ctrl + Shift + P**   |
| Terminal int√©gr√©                  | **Ctrl + \`**          |
| Ex√©cuter le fichier actif         | **Ctrl + F5**          |
| D√©boguer                          | **F5**                 |
| Commenter / d√©commenter           | **Ctrl + /**           |
| Formatage (avec Black / autopep8) | **Shift + Alt + F**    |
| Rename symbol                     | **F2**                 |
| Multi-curseurs (ajout ligne)      | **Alt + Shift + clic** |

---

### 6. Sc√©narios rapides

#### üîÑ ‚ÄúJe veux repartir de z√©ro mais garder mon code‚Äù

```bash
deactivate           # sort du venv actuel
rmdir /s /q .venv    # supprime l'ancien environnement (cmd)*
python -m venv .venv # recr√©e
.\.venv\Scripts\activate
pip install -r requirements.txt
```

\* ou `Remove-Item -Recurse -Force .venv` sous PowerShell.

---

#### üíæ ‚ÄúJe veux pousser mon code sur GitHub sans mes d√©pendances‚Äù

1. Ajoute `.venv/` (ou `env/`) dans **.gitignore**.
2. Commit ‚Üí `git push origin ma-branche`.
3. Les autres devs feront : `python -m venv .venv && pip install -r requirements.txt`.

---

### 7. Quand √ßa coince : check-list

| Question                         | V√©rification                                                                                 |
| -------------------------------- | -------------------------------------------------------------------------------------------- |
| VS Code voit-il le bon Python ?  | `Python: Select Interpreter`                                                                 |
| Terminal affiche-t-il `(venv)` ? | Prompt doit changer apr√®s activation                                                         |
| Script d‚Äôactivation bloqu√© ?     | ex√©cute `Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned` puis r√©essaye |
| Paquet ‚Äúmanquant‚Äù malgr√© pip ?   | `which python` (Git Bash) / `Get-Command python` (PS) pour v√©rifier le Python utilis√©        |
| Toujours rien ?                  | Red√©marre VS Code (Ctrl + Shift + P ‚Üí **Reload Window**)                                     |

---

### 8. Ressources √©clair

* **Python in VS Code** (doc officielle)
  `https://code.visualstudio.com/docs/python/python-tutorial`
* **VS Code Keyboard Shortcuts**
  `Ctrl + K Ctrl + S` (ouvre le panneau complet et editable)

---

üí° *Garde cette fiche sous la main ; en deux ou trois ouvertures de projet tu n‚Äôauras plus √† y penser !*
