name: 🚀 AIMER - Maintenance Intelligente
# Workflow automatisé pour maintenir le projet AIMER
# Explication pour néophytes incluse

on:
  # Déclenche le workflow sur plusieurs événements
  push:
    branches: [ main, alpha, dev ]
  pull_request:
    branches: [ main, alpha ]
  schedule:
    # Vérification automatique tous les lundis à 9h
    - cron: '0 9 * * 1'
  workflow_dispatch:
    # Permet de lancer manuellement le workflow

jobs:
  # === JOB 1: AUDIT DE SÉCURITÉ ===
  security-audit:
    name: 🔒 Audit de Sécurité
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Récupération du code
      uses: actions/checkout@v4
      
    - name: 🐍 Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🛡️ Scan de sécurité avec Bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o security-report.json || true
        
    - name: 📊 Scan des dépendances vulnérables
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: 📋 Rapport de sécurité
      run: |
        echo "🔒 RAPPORT DE SÉCURITÉ AIMER" >> $GITHUB_STEP_SUMMARY
        echo "==========================" >> $GITHUB_STEP_SUMMARY
        echo "✅ Scan terminé" >> $GITHUB_STEP_SUMMARY
        echo "📁 Rapports générés:" >> $GITHUB_STEP_SUMMARY
        echo "- security-report.json" >> $GITHUB_STEP_SUMMARY
        echo "- safety-report.json" >> $GITHUB_STEP_SUMMARY

  # === JOB 2: QUALITÉ DU CODE ===
  code-quality:
    name: 📝 Qualité du Code
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Récupération du code
      uses: actions/checkout@v4
      
    - name: 🐍 Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📦 Installation des outils de qualité
      run: |
        pip install flake8 black isort mypy
        
    - name: 🎨 Vérification du formatage (Black)
      run: |
        black --check --diff . || echo "⚠️ Code mal formaté détecté"
        
    - name: 📋 Vérification du style (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: 🔄 Vérification des imports (isort)
      run: |
        isort . --check-only --diff || echo "⚠️ Imports mal triés détectés"
        
    - name: 🔍 Analyse de types (MyPy)
      run: |
        mypy . --ignore-missing-imports || echo "⚠️ Problèmes de types détectés"

  # === JOB 3: DOCUMENTATION ===
  documentation:
    name: 📚 Vérification Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Récupération du code
      uses: actions/checkout@v4
      
    - name: ✅ Vérification README.md
      run: |
        if [ -f "README.md" ]; then
          echo "✅ README.md présent"
          wc -l README.md
        else
          echo "❌ README.md manquant"
          exit 1
        fi
        
    - name: 📋 Vérification des commentaires
      run: |
        echo "📊 STATISTIQUES DE DOCUMENTATION" >> $GITHUB_STEP_SUMMARY
        echo "================================" >> $GITHUB_STEP_SUMMARY
        
        # Compter les lignes de code et commentaires
        TOTAL_LINES=$(find . -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
        COMMENT_LINES=$(find . -name "*.py" -exec grep -c "^[[:space:]]*#" {} + | awk '{sum+=$1} END {print sum}')
        
        echo "📝 Lignes de code total: $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
        echo "💬 Lignes de commentaires: $COMMENT_LINES" >> $GITHUB_STEP_SUMMARY
        
        if [ $COMMENT_LINES -gt 0 ]; then
          RATIO=$((COMMENT_LINES * 100 / TOTAL_LINES))
          echo "📊 Ratio commentaires: $RATIO%" >> $GITHUB_STEP_SUMMARY
        fi

  # === JOB 4: PERFORMANCE & MAINTENANCE ===
  maintenance:
    name: 🔧 Maintenance Automatique
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Récupération du code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🔄 Mise à jour des dépendances
      run: |
        pip install pip-tools
        pip-compile requirements_security.txt --upgrade || echo "Pas de requirements à compiler"
        
    - name: 🧹 Nettoyage automatique
      run: |
        # Supprimer les fichiers temporaires
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        find . -name "*.log" -delete || true
        
    - name: 📊 Génération du rapport de maintenance
      run: |
        echo "🔧 RAPPORT DE MAINTENANCE AIMER" > MAINTENANCE_REPORT.md
        echo "===============================" >> MAINTENANCE_REPORT.md
        echo "" >> MAINTENANCE_REPORT.md
        echo "📅 Date: $(date)" >> MAINTENANCE_REPORT.md
        echo "🏗️ Branche: ${{ github.ref_name }}" >> MAINTENANCE_REPORT.md
        echo "" >> MAINTENANCE_REPORT.md
        
        echo "## 📊 Statistiques du projet" >> MAINTENANCE_REPORT.md
        echo "- **Fichiers Python**: $(find . -name "*.py" | wc -l)" >> MAINTENANCE_REPORT.md
        echo "- **Lignes de code**: $(find . -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')" >> MAINTENANCE_REPORT.md
        echo "- **Taille du repo**: $(du -sh . | cut -f1)" >> MAINTENANCE_REPORT.md
        echo "" >> MAINTENANCE_REPORT.md
        
        echo "## 🔧 Actions effectuées" >> MAINTENANCE_REPORT.md
        echo "- ✅ Nettoyage des fichiers temporaires" >> MAINTENANCE_REPORT.md
        echo "- ✅ Vérification de la structure" >> MAINTENANCE_REPORT.md
        echo "- ✅ Audit de sécurité" >> MAINTENANCE_REPORT.md
        
    - name: 💾 Commit des changements automatiques
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "🤖 Maintenance automatique - $(date +%Y-%m-%d)"
          git push
        else
          echo "Aucun changement à committer"
        fi

  # === JOB 5: NOTIFICATION SUMMARY ===
  summary:
    name: 📋 Résumé Final
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, documentation]
    if: always()
    
    steps:
    - name: 📊 Génération du résumé
      run: |
        echo "# 🚀 RAPPORT AIMER - Maintenance Intelligente" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Statut des vérifications" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Statut de chaque job
        echo "| Job | Statut |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Sécurité | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📝 Qualité | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📚 Documentation | ${{ needs.documentation.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 💡 Explication pour néophytes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Ce workflow automatise la maintenance de votre projet AIMER :**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔒 **Sécurité** : Vérifie qu'il n'y a pas de vulnérabilités" >> $GITHUB_STEP_SUMMARY
        echo "📝 **Qualité** : S'assure que le code respecte les bonnes pratiques" >> $GITHUB_STEP_SUMMARY
        echo "📚 **Documentation** : Vérifie que le projet est bien documenté" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Maintenance** : Nettoie et met à jour automatiquement" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🤖 **Ce système maintient votre projet en bonne santé automatiquement !**"
